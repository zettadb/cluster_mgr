// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: raft_msg.proto

#ifndef PROTOBUF_raft_5fmsg_2eproto__INCLUDED
#define PROTOBUF_raft_5fmsg_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_raft_5fmsg_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsraft_msgImpl();
void InitDefaultsraft_msg();
inline void InitDefaults() {
  InitDefaultsraft_msg();
}
}  // namespace protobuf_raft_5fmsg_2eproto
namespace raft_ha {
class raft_msg;
class raft_msgDefaultTypeInternal;
extern raft_msgDefaultTypeInternal _raft_msg_default_instance_;
}  // namespace raft_ha
namespace raft_ha {

// ===================================================================

class raft_msg : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:raft_ha.raft_msg) */ {
 public:
  raft_msg();
  virtual ~raft_msg();

  raft_msg(const raft_msg& from);

  inline raft_msg& operator=(const raft_msg& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  raft_msg(raft_msg&& from) noexcept
    : raft_msg() {
    *this = ::std::move(from);
  }

  inline raft_msg& operator=(raft_msg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const raft_msg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const raft_msg* internal_default_instance() {
    return reinterpret_cast<const raft_msg*>(
               &_raft_msg_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(raft_msg* other);
  friend void swap(raft_msg& a, raft_msg& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline raft_msg* New() const PROTOBUF_FINAL { return New(NULL); }

  raft_msg* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const raft_msg& from);
  void MergeFrom(const raft_msg& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(raft_msg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string key = 2;
  bool has_key() const;
  void clear_key();
  static const int kKeyFieldNumber = 2;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  #if LANG_CXX11
  void set_key(::std::string&& value);
  #endif
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // optional string msg = 3;
  bool has_msg() const;
  void clear_msg();
  static const int kMsgFieldNumber = 3;
  const ::std::string& msg() const;
  void set_msg(const ::std::string& value);
  #if LANG_CXX11
  void set_msg(::std::string&& value);
  #endif
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  ::std::string* mutable_msg();
  ::std::string* release_msg();
  void set_allocated_msg(::std::string* msg);

  // required int32 op = 1;
  bool has_op() const;
  void clear_op();
  static const int kOpFieldNumber = 1;
  ::google::protobuf::int32 op() const;
  void set_op(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:raft_ha.raft_msg)
 private:
  void set_has_op();
  void clear_has_op();
  void set_has_key();
  void clear_has_key();
  void set_has_msg();
  void clear_has_msg();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::google::protobuf::internal::ArenaStringPtr msg_;
  ::google::protobuf::int32 op_;
  friend struct ::protobuf_raft_5fmsg_2eproto::TableStruct;
  friend void ::protobuf_raft_5fmsg_2eproto::InitDefaultsraft_msgImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// raft_msg

// required int32 op = 1;
inline bool raft_msg::has_op() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void raft_msg::set_has_op() {
  _has_bits_[0] |= 0x00000004u;
}
inline void raft_msg::clear_has_op() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void raft_msg::clear_op() {
  op_ = 0;
  clear_has_op();
}
inline ::google::protobuf::int32 raft_msg::op() const {
  // @@protoc_insertion_point(field_get:raft_ha.raft_msg.op)
  return op_;
}
inline void raft_msg::set_op(::google::protobuf::int32 value) {
  set_has_op();
  op_ = value;
  // @@protoc_insertion_point(field_set:raft_ha.raft_msg.op)
}

// required string key = 2;
inline bool raft_msg::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void raft_msg::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void raft_msg::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void raft_msg::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
inline const ::std::string& raft_msg::key() const {
  // @@protoc_insertion_point(field_get:raft_ha.raft_msg.key)
  return key_.GetNoArena();
}
inline void raft_msg::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raft_ha.raft_msg.key)
}
#if LANG_CXX11
inline void raft_msg::set_key(::std::string&& value) {
  set_has_key();
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:raft_ha.raft_msg.key)
}
#endif
inline void raft_msg::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raft_ha.raft_msg.key)
}
inline void raft_msg::set_key(const char* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raft_ha.raft_msg.key)
}
inline ::std::string* raft_msg::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:raft_ha.raft_msg.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* raft_msg::release_key() {
  // @@protoc_insertion_point(field_release:raft_ha.raft_msg.key)
  clear_has_key();
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void raft_msg::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:raft_ha.raft_msg.key)
}

// optional string msg = 3;
inline bool raft_msg::has_msg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void raft_msg::set_has_msg() {
  _has_bits_[0] |= 0x00000002u;
}
inline void raft_msg::clear_has_msg() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void raft_msg::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_msg();
}
inline const ::std::string& raft_msg::msg() const {
  // @@protoc_insertion_point(field_get:raft_ha.raft_msg.msg)
  return msg_.GetNoArena();
}
inline void raft_msg::set_msg(const ::std::string& value) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raft_ha.raft_msg.msg)
}
#if LANG_CXX11
inline void raft_msg::set_msg(::std::string&& value) {
  set_has_msg();
  msg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:raft_ha.raft_msg.msg)
}
#endif
inline void raft_msg::set_msg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raft_ha.raft_msg.msg)
}
inline void raft_msg::set_msg(const char* value, size_t size) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raft_ha.raft_msg.msg)
}
inline ::std::string* raft_msg::mutable_msg() {
  set_has_msg();
  // @@protoc_insertion_point(field_mutable:raft_ha.raft_msg.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* raft_msg::release_msg() {
  // @@protoc_insertion_point(field_release:raft_ha.raft_msg.msg)
  clear_has_msg();
  return msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void raft_msg::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    set_has_msg();
  } else {
    clear_has_msg();
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:raft_ha.raft_msg.msg)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace raft_ha

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_raft_5fmsg_2eproto__INCLUDED
