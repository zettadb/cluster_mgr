// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: braft/raft.proto

#ifndef PROTOBUF_braft_2fraft_2eproto__INCLUDED
#define PROTOBUF_braft_2fraft_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
#include "braft/enum.pb.h"
// @@protoc_insertion_point(includes)

namespace protobuf_braft_2fraft_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[11];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsEntryMetaImpl();
void InitDefaultsEntryMeta();
void InitDefaultsTermLeaderImpl();
void InitDefaultsTermLeader();
void InitDefaultsRequestVoteRequestImpl();
void InitDefaultsRequestVoteRequest();
void InitDefaultsRequestVoteResponseImpl();
void InitDefaultsRequestVoteResponse();
void InitDefaultsAppendEntriesRequestImpl();
void InitDefaultsAppendEntriesRequest();
void InitDefaultsAppendEntriesResponseImpl();
void InitDefaultsAppendEntriesResponse();
void InitDefaultsSnapshotMetaImpl();
void InitDefaultsSnapshotMeta();
void InitDefaultsInstallSnapshotRequestImpl();
void InitDefaultsInstallSnapshotRequest();
void InitDefaultsInstallSnapshotResponseImpl();
void InitDefaultsInstallSnapshotResponse();
void InitDefaultsTimeoutNowRequestImpl();
void InitDefaultsTimeoutNowRequest();
void InitDefaultsTimeoutNowResponseImpl();
void InitDefaultsTimeoutNowResponse();
inline void InitDefaults() {
  InitDefaultsEntryMeta();
  InitDefaultsTermLeader();
  InitDefaultsRequestVoteRequest();
  InitDefaultsRequestVoteResponse();
  InitDefaultsAppendEntriesRequest();
  InitDefaultsAppendEntriesResponse();
  InitDefaultsSnapshotMeta();
  InitDefaultsInstallSnapshotRequest();
  InitDefaultsInstallSnapshotResponse();
  InitDefaultsTimeoutNowRequest();
  InitDefaultsTimeoutNowResponse();
}
}  // namespace protobuf_braft_2fraft_2eproto
namespace braft {
class AppendEntriesRequest;
class AppendEntriesRequestDefaultTypeInternal;
extern AppendEntriesRequestDefaultTypeInternal _AppendEntriesRequest_default_instance_;
class AppendEntriesResponse;
class AppendEntriesResponseDefaultTypeInternal;
extern AppendEntriesResponseDefaultTypeInternal _AppendEntriesResponse_default_instance_;
class EntryMeta;
class EntryMetaDefaultTypeInternal;
extern EntryMetaDefaultTypeInternal _EntryMeta_default_instance_;
class InstallSnapshotRequest;
class InstallSnapshotRequestDefaultTypeInternal;
extern InstallSnapshotRequestDefaultTypeInternal _InstallSnapshotRequest_default_instance_;
class InstallSnapshotResponse;
class InstallSnapshotResponseDefaultTypeInternal;
extern InstallSnapshotResponseDefaultTypeInternal _InstallSnapshotResponse_default_instance_;
class RequestVoteRequest;
class RequestVoteRequestDefaultTypeInternal;
extern RequestVoteRequestDefaultTypeInternal _RequestVoteRequest_default_instance_;
class RequestVoteResponse;
class RequestVoteResponseDefaultTypeInternal;
extern RequestVoteResponseDefaultTypeInternal _RequestVoteResponse_default_instance_;
class SnapshotMeta;
class SnapshotMetaDefaultTypeInternal;
extern SnapshotMetaDefaultTypeInternal _SnapshotMeta_default_instance_;
class TermLeader;
class TermLeaderDefaultTypeInternal;
extern TermLeaderDefaultTypeInternal _TermLeader_default_instance_;
class TimeoutNowRequest;
class TimeoutNowRequestDefaultTypeInternal;
extern TimeoutNowRequestDefaultTypeInternal _TimeoutNowRequest_default_instance_;
class TimeoutNowResponse;
class TimeoutNowResponseDefaultTypeInternal;
extern TimeoutNowResponseDefaultTypeInternal _TimeoutNowResponse_default_instance_;
}  // namespace braft
namespace braft {

// ===================================================================

class EntryMeta : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:braft.EntryMeta) */ {
 public:
  EntryMeta();
  virtual ~EntryMeta();

  EntryMeta(const EntryMeta& from);

  inline EntryMeta& operator=(const EntryMeta& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EntryMeta(EntryMeta&& from) noexcept
    : EntryMeta() {
    *this = ::std::move(from);
  }

  inline EntryMeta& operator=(EntryMeta&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EntryMeta& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EntryMeta* internal_default_instance() {
    return reinterpret_cast<const EntryMeta*>(
               &_EntryMeta_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(EntryMeta* other);
  friend void swap(EntryMeta& a, EntryMeta& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EntryMeta* New() const PROTOBUF_FINAL { return New(NULL); }

  EntryMeta* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const EntryMeta& from);
  void MergeFrom(const EntryMeta& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(EntryMeta* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string peers = 3;
  int peers_size() const;
  void clear_peers();
  static const int kPeersFieldNumber = 3;
  const ::std::string& peers(int index) const;
  ::std::string* mutable_peers(int index);
  void set_peers(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_peers(int index, ::std::string&& value);
  #endif
  void set_peers(int index, const char* value);
  void set_peers(int index, const char* value, size_t size);
  ::std::string* add_peers();
  void add_peers(const ::std::string& value);
  #if LANG_CXX11
  void add_peers(::std::string&& value);
  #endif
  void add_peers(const char* value);
  void add_peers(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& peers() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_peers();

  // repeated string old_peers = 5;
  int old_peers_size() const;
  void clear_old_peers();
  static const int kOldPeersFieldNumber = 5;
  const ::std::string& old_peers(int index) const;
  ::std::string* mutable_old_peers(int index);
  void set_old_peers(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_old_peers(int index, ::std::string&& value);
  #endif
  void set_old_peers(int index, const char* value);
  void set_old_peers(int index, const char* value, size_t size);
  ::std::string* add_old_peers();
  void add_old_peers(const ::std::string& value);
  #if LANG_CXX11
  void add_old_peers(::std::string&& value);
  #endif
  void add_old_peers(const char* value);
  void add_old_peers(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& old_peers() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_old_peers();

  // required int64 term = 1;
  bool has_term() const;
  void clear_term();
  static const int kTermFieldNumber = 1;
  ::google::protobuf::int64 term() const;
  void set_term(::google::protobuf::int64 value);

  // optional int64 data_len = 4;
  bool has_data_len() const;
  void clear_data_len();
  static const int kDataLenFieldNumber = 4;
  ::google::protobuf::int64 data_len() const;
  void set_data_len(::google::protobuf::int64 value);

  // required .braft.EntryType type = 2;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::braft::EntryType type() const;
  void set_type(::braft::EntryType value);

  // @@protoc_insertion_point(class_scope:braft.EntryMeta)
 private:
  void set_has_term();
  void clear_has_term();
  void set_has_type();
  void clear_has_type();
  void set_has_data_len();
  void clear_has_data_len();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> peers_;
  ::google::protobuf::RepeatedPtrField< ::std::string> old_peers_;
  ::google::protobuf::int64 term_;
  ::google::protobuf::int64 data_len_;
  int type_;
  friend struct ::protobuf_braft_2fraft_2eproto::TableStruct;
  friend void ::protobuf_braft_2fraft_2eproto::InitDefaultsEntryMetaImpl();
};
// -------------------------------------------------------------------

class TermLeader : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:braft.TermLeader) */ {
 public:
  TermLeader();
  virtual ~TermLeader();

  TermLeader(const TermLeader& from);

  inline TermLeader& operator=(const TermLeader& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TermLeader(TermLeader&& from) noexcept
    : TermLeader() {
    *this = ::std::move(from);
  }

  inline TermLeader& operator=(TermLeader&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TermLeader& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TermLeader* internal_default_instance() {
    return reinterpret_cast<const TermLeader*>(
               &_TermLeader_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(TermLeader* other);
  friend void swap(TermLeader& a, TermLeader& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TermLeader* New() const PROTOBUF_FINAL { return New(NULL); }

  TermLeader* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TermLeader& from);
  void MergeFrom(const TermLeader& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TermLeader* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string peer_id = 1;
  bool has_peer_id() const;
  void clear_peer_id();
  static const int kPeerIdFieldNumber = 1;
  const ::std::string& peer_id() const;
  void set_peer_id(const ::std::string& value);
  #if LANG_CXX11
  void set_peer_id(::std::string&& value);
  #endif
  void set_peer_id(const char* value);
  void set_peer_id(const char* value, size_t size);
  ::std::string* mutable_peer_id();
  ::std::string* release_peer_id();
  void set_allocated_peer_id(::std::string* peer_id);

  // required int64 term = 2;
  bool has_term() const;
  void clear_term();
  static const int kTermFieldNumber = 2;
  ::google::protobuf::int64 term() const;
  void set_term(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:braft.TermLeader)
 private:
  void set_has_peer_id();
  void clear_has_peer_id();
  void set_has_term();
  void clear_has_term();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr peer_id_;
  ::google::protobuf::int64 term_;
  friend struct ::protobuf_braft_2fraft_2eproto::TableStruct;
  friend void ::protobuf_braft_2fraft_2eproto::InitDefaultsTermLeaderImpl();
};
// -------------------------------------------------------------------

class RequestVoteRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:braft.RequestVoteRequest) */ {
 public:
  RequestVoteRequest();
  virtual ~RequestVoteRequest();

  RequestVoteRequest(const RequestVoteRequest& from);

  inline RequestVoteRequest& operator=(const RequestVoteRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RequestVoteRequest(RequestVoteRequest&& from) noexcept
    : RequestVoteRequest() {
    *this = ::std::move(from);
  }

  inline RequestVoteRequest& operator=(RequestVoteRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RequestVoteRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RequestVoteRequest* internal_default_instance() {
    return reinterpret_cast<const RequestVoteRequest*>(
               &_RequestVoteRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(RequestVoteRequest* other);
  friend void swap(RequestVoteRequest& a, RequestVoteRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RequestVoteRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  RequestVoteRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RequestVoteRequest& from);
  void MergeFrom(const RequestVoteRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RequestVoteRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string group_id = 1;
  bool has_group_id() const;
  void clear_group_id();
  static const int kGroupIdFieldNumber = 1;
  const ::std::string& group_id() const;
  void set_group_id(const ::std::string& value);
  #if LANG_CXX11
  void set_group_id(::std::string&& value);
  #endif
  void set_group_id(const char* value);
  void set_group_id(const char* value, size_t size);
  ::std::string* mutable_group_id();
  ::std::string* release_group_id();
  void set_allocated_group_id(::std::string* group_id);

  // required string server_id = 2;
  bool has_server_id() const;
  void clear_server_id();
  static const int kServerIdFieldNumber = 2;
  const ::std::string& server_id() const;
  void set_server_id(const ::std::string& value);
  #if LANG_CXX11
  void set_server_id(::std::string&& value);
  #endif
  void set_server_id(const char* value);
  void set_server_id(const char* value, size_t size);
  ::std::string* mutable_server_id();
  ::std::string* release_server_id();
  void set_allocated_server_id(::std::string* server_id);

  // required string peer_id = 3;
  bool has_peer_id() const;
  void clear_peer_id();
  static const int kPeerIdFieldNumber = 3;
  const ::std::string& peer_id() const;
  void set_peer_id(const ::std::string& value);
  #if LANG_CXX11
  void set_peer_id(::std::string&& value);
  #endif
  void set_peer_id(const char* value);
  void set_peer_id(const char* value, size_t size);
  ::std::string* mutable_peer_id();
  ::std::string* release_peer_id();
  void set_allocated_peer_id(::std::string* peer_id);

  // optional .braft.TermLeader disrupted_leader = 7;
  bool has_disrupted_leader() const;
  void clear_disrupted_leader();
  static const int kDisruptedLeaderFieldNumber = 7;
  const ::braft::TermLeader& disrupted_leader() const;
  ::braft::TermLeader* release_disrupted_leader();
  ::braft::TermLeader* mutable_disrupted_leader();
  void set_allocated_disrupted_leader(::braft::TermLeader* disrupted_leader);

  // required int64 term = 4;
  bool has_term() const;
  void clear_term();
  static const int kTermFieldNumber = 4;
  ::google::protobuf::int64 term() const;
  void set_term(::google::protobuf::int64 value);

  // required int64 last_log_term = 5;
  bool has_last_log_term() const;
  void clear_last_log_term();
  static const int kLastLogTermFieldNumber = 5;
  ::google::protobuf::int64 last_log_term() const;
  void set_last_log_term(::google::protobuf::int64 value);

  // required int64 last_log_index = 6;
  bool has_last_log_index() const;
  void clear_last_log_index();
  static const int kLastLogIndexFieldNumber = 6;
  ::google::protobuf::int64 last_log_index() const;
  void set_last_log_index(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:braft.RequestVoteRequest)
 private:
  void set_has_group_id();
  void clear_has_group_id();
  void set_has_server_id();
  void clear_has_server_id();
  void set_has_peer_id();
  void clear_has_peer_id();
  void set_has_term();
  void clear_has_term();
  void set_has_last_log_term();
  void clear_has_last_log_term();
  void set_has_last_log_index();
  void clear_has_last_log_index();
  void set_has_disrupted_leader();
  void clear_has_disrupted_leader();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr group_id_;
  ::google::protobuf::internal::ArenaStringPtr server_id_;
  ::google::protobuf::internal::ArenaStringPtr peer_id_;
  ::braft::TermLeader* disrupted_leader_;
  ::google::protobuf::int64 term_;
  ::google::protobuf::int64 last_log_term_;
  ::google::protobuf::int64 last_log_index_;
  friend struct ::protobuf_braft_2fraft_2eproto::TableStruct;
  friend void ::protobuf_braft_2fraft_2eproto::InitDefaultsRequestVoteRequestImpl();
};
// -------------------------------------------------------------------

class RequestVoteResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:braft.RequestVoteResponse) */ {
 public:
  RequestVoteResponse();
  virtual ~RequestVoteResponse();

  RequestVoteResponse(const RequestVoteResponse& from);

  inline RequestVoteResponse& operator=(const RequestVoteResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RequestVoteResponse(RequestVoteResponse&& from) noexcept
    : RequestVoteResponse() {
    *this = ::std::move(from);
  }

  inline RequestVoteResponse& operator=(RequestVoteResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RequestVoteResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RequestVoteResponse* internal_default_instance() {
    return reinterpret_cast<const RequestVoteResponse*>(
               &_RequestVoteResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(RequestVoteResponse* other);
  friend void swap(RequestVoteResponse& a, RequestVoteResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RequestVoteResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  RequestVoteResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RequestVoteResponse& from);
  void MergeFrom(const RequestVoteResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RequestVoteResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 term = 1;
  bool has_term() const;
  void clear_term();
  static const int kTermFieldNumber = 1;
  ::google::protobuf::int64 term() const;
  void set_term(::google::protobuf::int64 value);

  // optional int64 previous_term = 4;
  bool has_previous_term() const;
  void clear_previous_term();
  static const int kPreviousTermFieldNumber = 4;
  ::google::protobuf::int64 previous_term() const;
  void set_previous_term(::google::protobuf::int64 value);

  // required bool granted = 2;
  bool has_granted() const;
  void clear_granted();
  static const int kGrantedFieldNumber = 2;
  bool granted() const;
  void set_granted(bool value);

  // optional bool disrupted = 3;
  bool has_disrupted() const;
  void clear_disrupted();
  static const int kDisruptedFieldNumber = 3;
  bool disrupted() const;
  void set_disrupted(bool value);

  // optional bool rejected_by_lease = 5;
  bool has_rejected_by_lease() const;
  void clear_rejected_by_lease();
  static const int kRejectedByLeaseFieldNumber = 5;
  bool rejected_by_lease() const;
  void set_rejected_by_lease(bool value);

  // @@protoc_insertion_point(class_scope:braft.RequestVoteResponse)
 private:
  void set_has_term();
  void clear_has_term();
  void set_has_granted();
  void clear_has_granted();
  void set_has_disrupted();
  void clear_has_disrupted();
  void set_has_previous_term();
  void clear_has_previous_term();
  void set_has_rejected_by_lease();
  void clear_has_rejected_by_lease();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int64 term_;
  ::google::protobuf::int64 previous_term_;
  bool granted_;
  bool disrupted_;
  bool rejected_by_lease_;
  friend struct ::protobuf_braft_2fraft_2eproto::TableStruct;
  friend void ::protobuf_braft_2fraft_2eproto::InitDefaultsRequestVoteResponseImpl();
};
// -------------------------------------------------------------------

class AppendEntriesRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:braft.AppendEntriesRequest) */ {
 public:
  AppendEntriesRequest();
  virtual ~AppendEntriesRequest();

  AppendEntriesRequest(const AppendEntriesRequest& from);

  inline AppendEntriesRequest& operator=(const AppendEntriesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AppendEntriesRequest(AppendEntriesRequest&& from) noexcept
    : AppendEntriesRequest() {
    *this = ::std::move(from);
  }

  inline AppendEntriesRequest& operator=(AppendEntriesRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AppendEntriesRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AppendEntriesRequest* internal_default_instance() {
    return reinterpret_cast<const AppendEntriesRequest*>(
               &_AppendEntriesRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(AppendEntriesRequest* other);
  friend void swap(AppendEntriesRequest& a, AppendEntriesRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AppendEntriesRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  AppendEntriesRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AppendEntriesRequest& from);
  void MergeFrom(const AppendEntriesRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AppendEntriesRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .braft.EntryMeta entries = 7;
  int entries_size() const;
  void clear_entries();
  static const int kEntriesFieldNumber = 7;
  const ::braft::EntryMeta& entries(int index) const;
  ::braft::EntryMeta* mutable_entries(int index);
  ::braft::EntryMeta* add_entries();
  ::google::protobuf::RepeatedPtrField< ::braft::EntryMeta >*
      mutable_entries();
  const ::google::protobuf::RepeatedPtrField< ::braft::EntryMeta >&
      entries() const;

  // required string group_id = 1;
  bool has_group_id() const;
  void clear_group_id();
  static const int kGroupIdFieldNumber = 1;
  const ::std::string& group_id() const;
  void set_group_id(const ::std::string& value);
  #if LANG_CXX11
  void set_group_id(::std::string&& value);
  #endif
  void set_group_id(const char* value);
  void set_group_id(const char* value, size_t size);
  ::std::string* mutable_group_id();
  ::std::string* release_group_id();
  void set_allocated_group_id(::std::string* group_id);

  // required string server_id = 2;
  bool has_server_id() const;
  void clear_server_id();
  static const int kServerIdFieldNumber = 2;
  const ::std::string& server_id() const;
  void set_server_id(const ::std::string& value);
  #if LANG_CXX11
  void set_server_id(::std::string&& value);
  #endif
  void set_server_id(const char* value);
  void set_server_id(const char* value, size_t size);
  ::std::string* mutable_server_id();
  ::std::string* release_server_id();
  void set_allocated_server_id(::std::string* server_id);

  // required string peer_id = 3;
  bool has_peer_id() const;
  void clear_peer_id();
  static const int kPeerIdFieldNumber = 3;
  const ::std::string& peer_id() const;
  void set_peer_id(const ::std::string& value);
  #if LANG_CXX11
  void set_peer_id(::std::string&& value);
  #endif
  void set_peer_id(const char* value);
  void set_peer_id(const char* value, size_t size);
  ::std::string* mutable_peer_id();
  ::std::string* release_peer_id();
  void set_allocated_peer_id(::std::string* peer_id);

  // required int64 term = 4;
  bool has_term() const;
  void clear_term();
  static const int kTermFieldNumber = 4;
  ::google::protobuf::int64 term() const;
  void set_term(::google::protobuf::int64 value);

  // required int64 prev_log_term = 5;
  bool has_prev_log_term() const;
  void clear_prev_log_term();
  static const int kPrevLogTermFieldNumber = 5;
  ::google::protobuf::int64 prev_log_term() const;
  void set_prev_log_term(::google::protobuf::int64 value);

  // required int64 prev_log_index = 6;
  bool has_prev_log_index() const;
  void clear_prev_log_index();
  static const int kPrevLogIndexFieldNumber = 6;
  ::google::protobuf::int64 prev_log_index() const;
  void set_prev_log_index(::google::protobuf::int64 value);

  // required int64 committed_index = 8;
  bool has_committed_index() const;
  void clear_committed_index();
  static const int kCommittedIndexFieldNumber = 8;
  ::google::protobuf::int64 committed_index() const;
  void set_committed_index(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:braft.AppendEntriesRequest)
 private:
  void set_has_group_id();
  void clear_has_group_id();
  void set_has_server_id();
  void clear_has_server_id();
  void set_has_peer_id();
  void clear_has_peer_id();
  void set_has_term();
  void clear_has_term();
  void set_has_prev_log_term();
  void clear_has_prev_log_term();
  void set_has_prev_log_index();
  void clear_has_prev_log_index();
  void set_has_committed_index();
  void clear_has_committed_index();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::braft::EntryMeta > entries_;
  ::google::protobuf::internal::ArenaStringPtr group_id_;
  ::google::protobuf::internal::ArenaStringPtr server_id_;
  ::google::protobuf::internal::ArenaStringPtr peer_id_;
  ::google::protobuf::int64 term_;
  ::google::protobuf::int64 prev_log_term_;
  ::google::protobuf::int64 prev_log_index_;
  ::google::protobuf::int64 committed_index_;
  friend struct ::protobuf_braft_2fraft_2eproto::TableStruct;
  friend void ::protobuf_braft_2fraft_2eproto::InitDefaultsAppendEntriesRequestImpl();
};
// -------------------------------------------------------------------

class AppendEntriesResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:braft.AppendEntriesResponse) */ {
 public:
  AppendEntriesResponse();
  virtual ~AppendEntriesResponse();

  AppendEntriesResponse(const AppendEntriesResponse& from);

  inline AppendEntriesResponse& operator=(const AppendEntriesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AppendEntriesResponse(AppendEntriesResponse&& from) noexcept
    : AppendEntriesResponse() {
    *this = ::std::move(from);
  }

  inline AppendEntriesResponse& operator=(AppendEntriesResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AppendEntriesResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AppendEntriesResponse* internal_default_instance() {
    return reinterpret_cast<const AppendEntriesResponse*>(
               &_AppendEntriesResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(AppendEntriesResponse* other);
  friend void swap(AppendEntriesResponse& a, AppendEntriesResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AppendEntriesResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  AppendEntriesResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AppendEntriesResponse& from);
  void MergeFrom(const AppendEntriesResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AppendEntriesResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 term = 1;
  bool has_term() const;
  void clear_term();
  static const int kTermFieldNumber = 1;
  ::google::protobuf::int64 term() const;
  void set_term(::google::protobuf::int64 value);

  // optional int64 last_log_index = 3;
  bool has_last_log_index() const;
  void clear_last_log_index();
  static const int kLastLogIndexFieldNumber = 3;
  ::google::protobuf::int64 last_log_index() const;
  void set_last_log_index(::google::protobuf::int64 value);

  // required bool success = 2;
  bool has_success() const;
  void clear_success();
  static const int kSuccessFieldNumber = 2;
  bool success() const;
  void set_success(bool value);

  // optional bool readonly = 4;
  bool has_readonly() const;
  void clear_readonly();
  static const int kReadonlyFieldNumber = 4;
  bool readonly() const;
  void set_readonly(bool value);

  // @@protoc_insertion_point(class_scope:braft.AppendEntriesResponse)
 private:
  void set_has_term();
  void clear_has_term();
  void set_has_success();
  void clear_has_success();
  void set_has_last_log_index();
  void clear_has_last_log_index();
  void set_has_readonly();
  void clear_has_readonly();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int64 term_;
  ::google::protobuf::int64 last_log_index_;
  bool success_;
  bool readonly_;
  friend struct ::protobuf_braft_2fraft_2eproto::TableStruct;
  friend void ::protobuf_braft_2fraft_2eproto::InitDefaultsAppendEntriesResponseImpl();
};
// -------------------------------------------------------------------

class SnapshotMeta : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:braft.SnapshotMeta) */ {
 public:
  SnapshotMeta();
  virtual ~SnapshotMeta();

  SnapshotMeta(const SnapshotMeta& from);

  inline SnapshotMeta& operator=(const SnapshotMeta& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SnapshotMeta(SnapshotMeta&& from) noexcept
    : SnapshotMeta() {
    *this = ::std::move(from);
  }

  inline SnapshotMeta& operator=(SnapshotMeta&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SnapshotMeta& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SnapshotMeta* internal_default_instance() {
    return reinterpret_cast<const SnapshotMeta*>(
               &_SnapshotMeta_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(SnapshotMeta* other);
  friend void swap(SnapshotMeta& a, SnapshotMeta& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SnapshotMeta* New() const PROTOBUF_FINAL { return New(NULL); }

  SnapshotMeta* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SnapshotMeta& from);
  void MergeFrom(const SnapshotMeta& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SnapshotMeta* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string peers = 3;
  int peers_size() const;
  void clear_peers();
  static const int kPeersFieldNumber = 3;
  const ::std::string& peers(int index) const;
  ::std::string* mutable_peers(int index);
  void set_peers(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_peers(int index, ::std::string&& value);
  #endif
  void set_peers(int index, const char* value);
  void set_peers(int index, const char* value, size_t size);
  ::std::string* add_peers();
  void add_peers(const ::std::string& value);
  #if LANG_CXX11
  void add_peers(::std::string&& value);
  #endif
  void add_peers(const char* value);
  void add_peers(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& peers() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_peers();

  // repeated string old_peers = 4;
  int old_peers_size() const;
  void clear_old_peers();
  static const int kOldPeersFieldNumber = 4;
  const ::std::string& old_peers(int index) const;
  ::std::string* mutable_old_peers(int index);
  void set_old_peers(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_old_peers(int index, ::std::string&& value);
  #endif
  void set_old_peers(int index, const char* value);
  void set_old_peers(int index, const char* value, size_t size);
  ::std::string* add_old_peers();
  void add_old_peers(const ::std::string& value);
  #if LANG_CXX11
  void add_old_peers(::std::string&& value);
  #endif
  void add_old_peers(const char* value);
  void add_old_peers(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& old_peers() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_old_peers();

  // required int64 last_included_index = 1;
  bool has_last_included_index() const;
  void clear_last_included_index();
  static const int kLastIncludedIndexFieldNumber = 1;
  ::google::protobuf::int64 last_included_index() const;
  void set_last_included_index(::google::protobuf::int64 value);

  // required int64 last_included_term = 2;
  bool has_last_included_term() const;
  void clear_last_included_term();
  static const int kLastIncludedTermFieldNumber = 2;
  ::google::protobuf::int64 last_included_term() const;
  void set_last_included_term(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:braft.SnapshotMeta)
 private:
  void set_has_last_included_index();
  void clear_has_last_included_index();
  void set_has_last_included_term();
  void clear_has_last_included_term();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> peers_;
  ::google::protobuf::RepeatedPtrField< ::std::string> old_peers_;
  ::google::protobuf::int64 last_included_index_;
  ::google::protobuf::int64 last_included_term_;
  friend struct ::protobuf_braft_2fraft_2eproto::TableStruct;
  friend void ::protobuf_braft_2fraft_2eproto::InitDefaultsSnapshotMetaImpl();
};
// -------------------------------------------------------------------

class InstallSnapshotRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:braft.InstallSnapshotRequest) */ {
 public:
  InstallSnapshotRequest();
  virtual ~InstallSnapshotRequest();

  InstallSnapshotRequest(const InstallSnapshotRequest& from);

  inline InstallSnapshotRequest& operator=(const InstallSnapshotRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  InstallSnapshotRequest(InstallSnapshotRequest&& from) noexcept
    : InstallSnapshotRequest() {
    *this = ::std::move(from);
  }

  inline InstallSnapshotRequest& operator=(InstallSnapshotRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InstallSnapshotRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InstallSnapshotRequest* internal_default_instance() {
    return reinterpret_cast<const InstallSnapshotRequest*>(
               &_InstallSnapshotRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(InstallSnapshotRequest* other);
  friend void swap(InstallSnapshotRequest& a, InstallSnapshotRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline InstallSnapshotRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  InstallSnapshotRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const InstallSnapshotRequest& from);
  void MergeFrom(const InstallSnapshotRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(InstallSnapshotRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string group_id = 1;
  bool has_group_id() const;
  void clear_group_id();
  static const int kGroupIdFieldNumber = 1;
  const ::std::string& group_id() const;
  void set_group_id(const ::std::string& value);
  #if LANG_CXX11
  void set_group_id(::std::string&& value);
  #endif
  void set_group_id(const char* value);
  void set_group_id(const char* value, size_t size);
  ::std::string* mutable_group_id();
  ::std::string* release_group_id();
  void set_allocated_group_id(::std::string* group_id);

  // required string server_id = 2;
  bool has_server_id() const;
  void clear_server_id();
  static const int kServerIdFieldNumber = 2;
  const ::std::string& server_id() const;
  void set_server_id(const ::std::string& value);
  #if LANG_CXX11
  void set_server_id(::std::string&& value);
  #endif
  void set_server_id(const char* value);
  void set_server_id(const char* value, size_t size);
  ::std::string* mutable_server_id();
  ::std::string* release_server_id();
  void set_allocated_server_id(::std::string* server_id);

  // required string peer_id = 3;
  bool has_peer_id() const;
  void clear_peer_id();
  static const int kPeerIdFieldNumber = 3;
  const ::std::string& peer_id() const;
  void set_peer_id(const ::std::string& value);
  #if LANG_CXX11
  void set_peer_id(::std::string&& value);
  #endif
  void set_peer_id(const char* value);
  void set_peer_id(const char* value, size_t size);
  ::std::string* mutable_peer_id();
  ::std::string* release_peer_id();
  void set_allocated_peer_id(::std::string* peer_id);

  // required string uri = 6;
  bool has_uri() const;
  void clear_uri();
  static const int kUriFieldNumber = 6;
  const ::std::string& uri() const;
  void set_uri(const ::std::string& value);
  #if LANG_CXX11
  void set_uri(::std::string&& value);
  #endif
  void set_uri(const char* value);
  void set_uri(const char* value, size_t size);
  ::std::string* mutable_uri();
  ::std::string* release_uri();
  void set_allocated_uri(::std::string* uri);

  // required .braft.SnapshotMeta meta = 5;
  bool has_meta() const;
  void clear_meta();
  static const int kMetaFieldNumber = 5;
  const ::braft::SnapshotMeta& meta() const;
  ::braft::SnapshotMeta* release_meta();
  ::braft::SnapshotMeta* mutable_meta();
  void set_allocated_meta(::braft::SnapshotMeta* meta);

  // required int64 term = 4;
  bool has_term() const;
  void clear_term();
  static const int kTermFieldNumber = 4;
  ::google::protobuf::int64 term() const;
  void set_term(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:braft.InstallSnapshotRequest)
 private:
  void set_has_group_id();
  void clear_has_group_id();
  void set_has_server_id();
  void clear_has_server_id();
  void set_has_peer_id();
  void clear_has_peer_id();
  void set_has_term();
  void clear_has_term();
  void set_has_meta();
  void clear_has_meta();
  void set_has_uri();
  void clear_has_uri();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr group_id_;
  ::google::protobuf::internal::ArenaStringPtr server_id_;
  ::google::protobuf::internal::ArenaStringPtr peer_id_;
  ::google::protobuf::internal::ArenaStringPtr uri_;
  ::braft::SnapshotMeta* meta_;
  ::google::protobuf::int64 term_;
  friend struct ::protobuf_braft_2fraft_2eproto::TableStruct;
  friend void ::protobuf_braft_2fraft_2eproto::InitDefaultsInstallSnapshotRequestImpl();
};
// -------------------------------------------------------------------

class InstallSnapshotResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:braft.InstallSnapshotResponse) */ {
 public:
  InstallSnapshotResponse();
  virtual ~InstallSnapshotResponse();

  InstallSnapshotResponse(const InstallSnapshotResponse& from);

  inline InstallSnapshotResponse& operator=(const InstallSnapshotResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  InstallSnapshotResponse(InstallSnapshotResponse&& from) noexcept
    : InstallSnapshotResponse() {
    *this = ::std::move(from);
  }

  inline InstallSnapshotResponse& operator=(InstallSnapshotResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InstallSnapshotResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InstallSnapshotResponse* internal_default_instance() {
    return reinterpret_cast<const InstallSnapshotResponse*>(
               &_InstallSnapshotResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(InstallSnapshotResponse* other);
  friend void swap(InstallSnapshotResponse& a, InstallSnapshotResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline InstallSnapshotResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  InstallSnapshotResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const InstallSnapshotResponse& from);
  void MergeFrom(const InstallSnapshotResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(InstallSnapshotResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 term = 1;
  bool has_term() const;
  void clear_term();
  static const int kTermFieldNumber = 1;
  ::google::protobuf::int64 term() const;
  void set_term(::google::protobuf::int64 value);

  // required bool success = 2;
  bool has_success() const;
  void clear_success();
  static const int kSuccessFieldNumber = 2;
  bool success() const;
  void set_success(bool value);

  // @@protoc_insertion_point(class_scope:braft.InstallSnapshotResponse)
 private:
  void set_has_term();
  void clear_has_term();
  void set_has_success();
  void clear_has_success();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int64 term_;
  bool success_;
  friend struct ::protobuf_braft_2fraft_2eproto::TableStruct;
  friend void ::protobuf_braft_2fraft_2eproto::InitDefaultsInstallSnapshotResponseImpl();
};
// -------------------------------------------------------------------

class TimeoutNowRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:braft.TimeoutNowRequest) */ {
 public:
  TimeoutNowRequest();
  virtual ~TimeoutNowRequest();

  TimeoutNowRequest(const TimeoutNowRequest& from);

  inline TimeoutNowRequest& operator=(const TimeoutNowRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TimeoutNowRequest(TimeoutNowRequest&& from) noexcept
    : TimeoutNowRequest() {
    *this = ::std::move(from);
  }

  inline TimeoutNowRequest& operator=(TimeoutNowRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TimeoutNowRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TimeoutNowRequest* internal_default_instance() {
    return reinterpret_cast<const TimeoutNowRequest*>(
               &_TimeoutNowRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(TimeoutNowRequest* other);
  friend void swap(TimeoutNowRequest& a, TimeoutNowRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TimeoutNowRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  TimeoutNowRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TimeoutNowRequest& from);
  void MergeFrom(const TimeoutNowRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TimeoutNowRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string group_id = 1;
  bool has_group_id() const;
  void clear_group_id();
  static const int kGroupIdFieldNumber = 1;
  const ::std::string& group_id() const;
  void set_group_id(const ::std::string& value);
  #if LANG_CXX11
  void set_group_id(::std::string&& value);
  #endif
  void set_group_id(const char* value);
  void set_group_id(const char* value, size_t size);
  ::std::string* mutable_group_id();
  ::std::string* release_group_id();
  void set_allocated_group_id(::std::string* group_id);

  // required string server_id = 2;
  bool has_server_id() const;
  void clear_server_id();
  static const int kServerIdFieldNumber = 2;
  const ::std::string& server_id() const;
  void set_server_id(const ::std::string& value);
  #if LANG_CXX11
  void set_server_id(::std::string&& value);
  #endif
  void set_server_id(const char* value);
  void set_server_id(const char* value, size_t size);
  ::std::string* mutable_server_id();
  ::std::string* release_server_id();
  void set_allocated_server_id(::std::string* server_id);

  // required string peer_id = 3;
  bool has_peer_id() const;
  void clear_peer_id();
  static const int kPeerIdFieldNumber = 3;
  const ::std::string& peer_id() const;
  void set_peer_id(const ::std::string& value);
  #if LANG_CXX11
  void set_peer_id(::std::string&& value);
  #endif
  void set_peer_id(const char* value);
  void set_peer_id(const char* value, size_t size);
  ::std::string* mutable_peer_id();
  ::std::string* release_peer_id();
  void set_allocated_peer_id(::std::string* peer_id);

  // required int64 term = 4;
  bool has_term() const;
  void clear_term();
  static const int kTermFieldNumber = 4;
  ::google::protobuf::int64 term() const;
  void set_term(::google::protobuf::int64 value);

  // optional bool old_leader_stepped_down = 5;
  bool has_old_leader_stepped_down() const;
  void clear_old_leader_stepped_down();
  static const int kOldLeaderSteppedDownFieldNumber = 5;
  bool old_leader_stepped_down() const;
  void set_old_leader_stepped_down(bool value);

  // @@protoc_insertion_point(class_scope:braft.TimeoutNowRequest)
 private:
  void set_has_group_id();
  void clear_has_group_id();
  void set_has_server_id();
  void clear_has_server_id();
  void set_has_peer_id();
  void clear_has_peer_id();
  void set_has_term();
  void clear_has_term();
  void set_has_old_leader_stepped_down();
  void clear_has_old_leader_stepped_down();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr group_id_;
  ::google::protobuf::internal::ArenaStringPtr server_id_;
  ::google::protobuf::internal::ArenaStringPtr peer_id_;
  ::google::protobuf::int64 term_;
  bool old_leader_stepped_down_;
  friend struct ::protobuf_braft_2fraft_2eproto::TableStruct;
  friend void ::protobuf_braft_2fraft_2eproto::InitDefaultsTimeoutNowRequestImpl();
};
// -------------------------------------------------------------------

class TimeoutNowResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:braft.TimeoutNowResponse) */ {
 public:
  TimeoutNowResponse();
  virtual ~TimeoutNowResponse();

  TimeoutNowResponse(const TimeoutNowResponse& from);

  inline TimeoutNowResponse& operator=(const TimeoutNowResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TimeoutNowResponse(TimeoutNowResponse&& from) noexcept
    : TimeoutNowResponse() {
    *this = ::std::move(from);
  }

  inline TimeoutNowResponse& operator=(TimeoutNowResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TimeoutNowResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TimeoutNowResponse* internal_default_instance() {
    return reinterpret_cast<const TimeoutNowResponse*>(
               &_TimeoutNowResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void Swap(TimeoutNowResponse* other);
  friend void swap(TimeoutNowResponse& a, TimeoutNowResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TimeoutNowResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  TimeoutNowResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TimeoutNowResponse& from);
  void MergeFrom(const TimeoutNowResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TimeoutNowResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 term = 1;
  bool has_term() const;
  void clear_term();
  static const int kTermFieldNumber = 1;
  ::google::protobuf::int64 term() const;
  void set_term(::google::protobuf::int64 value);

  // required bool success = 2;
  bool has_success() const;
  void clear_success();
  static const int kSuccessFieldNumber = 2;
  bool success() const;
  void set_success(bool value);

  // @@protoc_insertion_point(class_scope:braft.TimeoutNowResponse)
 private:
  void set_has_term();
  void clear_has_term();
  void set_has_success();
  void clear_has_success();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int64 term_;
  bool success_;
  friend struct ::protobuf_braft_2fraft_2eproto::TableStruct;
  friend void ::protobuf_braft_2fraft_2eproto::InitDefaultsTimeoutNowResponseImpl();
};
// ===================================================================

class RaftService_Stub;

class RaftService : public ::google::protobuf::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline RaftService() {};
 public:
  virtual ~RaftService();

  typedef RaftService_Stub Stub;

  static const ::google::protobuf::ServiceDescriptor* descriptor();

  virtual void pre_vote(::google::protobuf::RpcController* controller,
                       const ::braft::RequestVoteRequest* request,
                       ::braft::RequestVoteResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void request_vote(::google::protobuf::RpcController* controller,
                       const ::braft::RequestVoteRequest* request,
                       ::braft::RequestVoteResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void append_entries(::google::protobuf::RpcController* controller,
                       const ::braft::AppendEntriesRequest* request,
                       ::braft::AppendEntriesResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void install_snapshot(::google::protobuf::RpcController* controller,
                       const ::braft::InstallSnapshotRequest* request,
                       ::braft::InstallSnapshotResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void timeout_now(::google::protobuf::RpcController* controller,
                       const ::braft::TimeoutNowRequest* request,
                       ::braft::TimeoutNowResponse* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::google::protobuf::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::google::protobuf::MethodDescriptor* method,
                  ::google::protobuf::RpcController* controller,
                  const ::google::protobuf::Message* request,
                  ::google::protobuf::Message* response,
                  ::google::protobuf::Closure* done);
  const ::google::protobuf::Message& GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const;
  const ::google::protobuf::Message& GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(RaftService);
};

class RaftService_Stub : public RaftService {
 public:
  RaftService_Stub(::google::protobuf::RpcChannel* channel);
  RaftService_Stub(::google::protobuf::RpcChannel* channel,
                   ::google::protobuf::Service::ChannelOwnership ownership);
  ~RaftService_Stub();

  inline ::google::protobuf::RpcChannel* channel() { return channel_; }

  // implements RaftService ------------------------------------------

  void pre_vote(::google::protobuf::RpcController* controller,
                       const ::braft::RequestVoteRequest* request,
                       ::braft::RequestVoteResponse* response,
                       ::google::protobuf::Closure* done);
  void request_vote(::google::protobuf::RpcController* controller,
                       const ::braft::RequestVoteRequest* request,
                       ::braft::RequestVoteResponse* response,
                       ::google::protobuf::Closure* done);
  void append_entries(::google::protobuf::RpcController* controller,
                       const ::braft::AppendEntriesRequest* request,
                       ::braft::AppendEntriesResponse* response,
                       ::google::protobuf::Closure* done);
  void install_snapshot(::google::protobuf::RpcController* controller,
                       const ::braft::InstallSnapshotRequest* request,
                       ::braft::InstallSnapshotResponse* response,
                       ::google::protobuf::Closure* done);
  void timeout_now(::google::protobuf::RpcController* controller,
                       const ::braft::TimeoutNowRequest* request,
                       ::braft::TimeoutNowResponse* response,
                       ::google::protobuf::Closure* done);
 private:
  ::google::protobuf::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(RaftService_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// EntryMeta

// required int64 term = 1;
inline bool EntryMeta::has_term() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EntryMeta::set_has_term() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EntryMeta::clear_has_term() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EntryMeta::clear_term() {
  term_ = GOOGLE_LONGLONG(0);
  clear_has_term();
}
inline ::google::protobuf::int64 EntryMeta::term() const {
  // @@protoc_insertion_point(field_get:braft.EntryMeta.term)
  return term_;
}
inline void EntryMeta::set_term(::google::protobuf::int64 value) {
  set_has_term();
  term_ = value;
  // @@protoc_insertion_point(field_set:braft.EntryMeta.term)
}

// required .braft.EntryType type = 2;
inline bool EntryMeta::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void EntryMeta::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void EntryMeta::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void EntryMeta::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::braft::EntryType EntryMeta::type() const {
  // @@protoc_insertion_point(field_get:braft.EntryMeta.type)
  return static_cast< ::braft::EntryType >(type_);
}
inline void EntryMeta::set_type(::braft::EntryType value) {
  assert(::braft::EntryType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:braft.EntryMeta.type)
}

// repeated string peers = 3;
inline int EntryMeta::peers_size() const {
  return peers_.size();
}
inline void EntryMeta::clear_peers() {
  peers_.Clear();
}
inline const ::std::string& EntryMeta::peers(int index) const {
  // @@protoc_insertion_point(field_get:braft.EntryMeta.peers)
  return peers_.Get(index);
}
inline ::std::string* EntryMeta::mutable_peers(int index) {
  // @@protoc_insertion_point(field_mutable:braft.EntryMeta.peers)
  return peers_.Mutable(index);
}
inline void EntryMeta::set_peers(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:braft.EntryMeta.peers)
  peers_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void EntryMeta::set_peers(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:braft.EntryMeta.peers)
  peers_.Mutable(index)->assign(std::move(value));
}
#endif
inline void EntryMeta::set_peers(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  peers_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:braft.EntryMeta.peers)
}
inline void EntryMeta::set_peers(int index, const char* value, size_t size) {
  peers_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:braft.EntryMeta.peers)
}
inline ::std::string* EntryMeta::add_peers() {
  // @@protoc_insertion_point(field_add_mutable:braft.EntryMeta.peers)
  return peers_.Add();
}
inline void EntryMeta::add_peers(const ::std::string& value) {
  peers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:braft.EntryMeta.peers)
}
#if LANG_CXX11
inline void EntryMeta::add_peers(::std::string&& value) {
  peers_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:braft.EntryMeta.peers)
}
#endif
inline void EntryMeta::add_peers(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  peers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:braft.EntryMeta.peers)
}
inline void EntryMeta::add_peers(const char* value, size_t size) {
  peers_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:braft.EntryMeta.peers)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
EntryMeta::peers() const {
  // @@protoc_insertion_point(field_list:braft.EntryMeta.peers)
  return peers_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
EntryMeta::mutable_peers() {
  // @@protoc_insertion_point(field_mutable_list:braft.EntryMeta.peers)
  return &peers_;
}

// optional int64 data_len = 4;
inline bool EntryMeta::has_data_len() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EntryMeta::set_has_data_len() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EntryMeta::clear_has_data_len() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EntryMeta::clear_data_len() {
  data_len_ = GOOGLE_LONGLONG(0);
  clear_has_data_len();
}
inline ::google::protobuf::int64 EntryMeta::data_len() const {
  // @@protoc_insertion_point(field_get:braft.EntryMeta.data_len)
  return data_len_;
}
inline void EntryMeta::set_data_len(::google::protobuf::int64 value) {
  set_has_data_len();
  data_len_ = value;
  // @@protoc_insertion_point(field_set:braft.EntryMeta.data_len)
}

// repeated string old_peers = 5;
inline int EntryMeta::old_peers_size() const {
  return old_peers_.size();
}
inline void EntryMeta::clear_old_peers() {
  old_peers_.Clear();
}
inline const ::std::string& EntryMeta::old_peers(int index) const {
  // @@protoc_insertion_point(field_get:braft.EntryMeta.old_peers)
  return old_peers_.Get(index);
}
inline ::std::string* EntryMeta::mutable_old_peers(int index) {
  // @@protoc_insertion_point(field_mutable:braft.EntryMeta.old_peers)
  return old_peers_.Mutable(index);
}
inline void EntryMeta::set_old_peers(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:braft.EntryMeta.old_peers)
  old_peers_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void EntryMeta::set_old_peers(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:braft.EntryMeta.old_peers)
  old_peers_.Mutable(index)->assign(std::move(value));
}
#endif
inline void EntryMeta::set_old_peers(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  old_peers_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:braft.EntryMeta.old_peers)
}
inline void EntryMeta::set_old_peers(int index, const char* value, size_t size) {
  old_peers_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:braft.EntryMeta.old_peers)
}
inline ::std::string* EntryMeta::add_old_peers() {
  // @@protoc_insertion_point(field_add_mutable:braft.EntryMeta.old_peers)
  return old_peers_.Add();
}
inline void EntryMeta::add_old_peers(const ::std::string& value) {
  old_peers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:braft.EntryMeta.old_peers)
}
#if LANG_CXX11
inline void EntryMeta::add_old_peers(::std::string&& value) {
  old_peers_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:braft.EntryMeta.old_peers)
}
#endif
inline void EntryMeta::add_old_peers(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  old_peers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:braft.EntryMeta.old_peers)
}
inline void EntryMeta::add_old_peers(const char* value, size_t size) {
  old_peers_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:braft.EntryMeta.old_peers)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
EntryMeta::old_peers() const {
  // @@protoc_insertion_point(field_list:braft.EntryMeta.old_peers)
  return old_peers_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
EntryMeta::mutable_old_peers() {
  // @@protoc_insertion_point(field_mutable_list:braft.EntryMeta.old_peers)
  return &old_peers_;
}

// -------------------------------------------------------------------

// TermLeader

// required string peer_id = 1;
inline bool TermLeader::has_peer_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TermLeader::set_has_peer_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TermLeader::clear_has_peer_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TermLeader::clear_peer_id() {
  peer_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_peer_id();
}
inline const ::std::string& TermLeader::peer_id() const {
  // @@protoc_insertion_point(field_get:braft.TermLeader.peer_id)
  return peer_id_.GetNoArena();
}
inline void TermLeader::set_peer_id(const ::std::string& value) {
  set_has_peer_id();
  peer_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:braft.TermLeader.peer_id)
}
#if LANG_CXX11
inline void TermLeader::set_peer_id(::std::string&& value) {
  set_has_peer_id();
  peer_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:braft.TermLeader.peer_id)
}
#endif
inline void TermLeader::set_peer_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_peer_id();
  peer_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:braft.TermLeader.peer_id)
}
inline void TermLeader::set_peer_id(const char* value, size_t size) {
  set_has_peer_id();
  peer_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:braft.TermLeader.peer_id)
}
inline ::std::string* TermLeader::mutable_peer_id() {
  set_has_peer_id();
  // @@protoc_insertion_point(field_mutable:braft.TermLeader.peer_id)
  return peer_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TermLeader::release_peer_id() {
  // @@protoc_insertion_point(field_release:braft.TermLeader.peer_id)
  clear_has_peer_id();
  return peer_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TermLeader::set_allocated_peer_id(::std::string* peer_id) {
  if (peer_id != NULL) {
    set_has_peer_id();
  } else {
    clear_has_peer_id();
  }
  peer_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), peer_id);
  // @@protoc_insertion_point(field_set_allocated:braft.TermLeader.peer_id)
}

// required int64 term = 2;
inline bool TermLeader::has_term() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TermLeader::set_has_term() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TermLeader::clear_has_term() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TermLeader::clear_term() {
  term_ = GOOGLE_LONGLONG(0);
  clear_has_term();
}
inline ::google::protobuf::int64 TermLeader::term() const {
  // @@protoc_insertion_point(field_get:braft.TermLeader.term)
  return term_;
}
inline void TermLeader::set_term(::google::protobuf::int64 value) {
  set_has_term();
  term_ = value;
  // @@protoc_insertion_point(field_set:braft.TermLeader.term)
}

// -------------------------------------------------------------------

// RequestVoteRequest

// required string group_id = 1;
inline bool RequestVoteRequest::has_group_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RequestVoteRequest::set_has_group_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RequestVoteRequest::clear_has_group_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RequestVoteRequest::clear_group_id() {
  group_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_group_id();
}
inline const ::std::string& RequestVoteRequest::group_id() const {
  // @@protoc_insertion_point(field_get:braft.RequestVoteRequest.group_id)
  return group_id_.GetNoArena();
}
inline void RequestVoteRequest::set_group_id(const ::std::string& value) {
  set_has_group_id();
  group_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:braft.RequestVoteRequest.group_id)
}
#if LANG_CXX11
inline void RequestVoteRequest::set_group_id(::std::string&& value) {
  set_has_group_id();
  group_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:braft.RequestVoteRequest.group_id)
}
#endif
inline void RequestVoteRequest::set_group_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_group_id();
  group_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:braft.RequestVoteRequest.group_id)
}
inline void RequestVoteRequest::set_group_id(const char* value, size_t size) {
  set_has_group_id();
  group_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:braft.RequestVoteRequest.group_id)
}
inline ::std::string* RequestVoteRequest::mutable_group_id() {
  set_has_group_id();
  // @@protoc_insertion_point(field_mutable:braft.RequestVoteRequest.group_id)
  return group_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RequestVoteRequest::release_group_id() {
  // @@protoc_insertion_point(field_release:braft.RequestVoteRequest.group_id)
  clear_has_group_id();
  return group_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RequestVoteRequest::set_allocated_group_id(::std::string* group_id) {
  if (group_id != NULL) {
    set_has_group_id();
  } else {
    clear_has_group_id();
  }
  group_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), group_id);
  // @@protoc_insertion_point(field_set_allocated:braft.RequestVoteRequest.group_id)
}

// required string server_id = 2;
inline bool RequestVoteRequest::has_server_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RequestVoteRequest::set_has_server_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RequestVoteRequest::clear_has_server_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RequestVoteRequest::clear_server_id() {
  server_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_server_id();
}
inline const ::std::string& RequestVoteRequest::server_id() const {
  // @@protoc_insertion_point(field_get:braft.RequestVoteRequest.server_id)
  return server_id_.GetNoArena();
}
inline void RequestVoteRequest::set_server_id(const ::std::string& value) {
  set_has_server_id();
  server_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:braft.RequestVoteRequest.server_id)
}
#if LANG_CXX11
inline void RequestVoteRequest::set_server_id(::std::string&& value) {
  set_has_server_id();
  server_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:braft.RequestVoteRequest.server_id)
}
#endif
inline void RequestVoteRequest::set_server_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_server_id();
  server_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:braft.RequestVoteRequest.server_id)
}
inline void RequestVoteRequest::set_server_id(const char* value, size_t size) {
  set_has_server_id();
  server_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:braft.RequestVoteRequest.server_id)
}
inline ::std::string* RequestVoteRequest::mutable_server_id() {
  set_has_server_id();
  // @@protoc_insertion_point(field_mutable:braft.RequestVoteRequest.server_id)
  return server_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RequestVoteRequest::release_server_id() {
  // @@protoc_insertion_point(field_release:braft.RequestVoteRequest.server_id)
  clear_has_server_id();
  return server_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RequestVoteRequest::set_allocated_server_id(::std::string* server_id) {
  if (server_id != NULL) {
    set_has_server_id();
  } else {
    clear_has_server_id();
  }
  server_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), server_id);
  // @@protoc_insertion_point(field_set_allocated:braft.RequestVoteRequest.server_id)
}

// required string peer_id = 3;
inline bool RequestVoteRequest::has_peer_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RequestVoteRequest::set_has_peer_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RequestVoteRequest::clear_has_peer_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RequestVoteRequest::clear_peer_id() {
  peer_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_peer_id();
}
inline const ::std::string& RequestVoteRequest::peer_id() const {
  // @@protoc_insertion_point(field_get:braft.RequestVoteRequest.peer_id)
  return peer_id_.GetNoArena();
}
inline void RequestVoteRequest::set_peer_id(const ::std::string& value) {
  set_has_peer_id();
  peer_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:braft.RequestVoteRequest.peer_id)
}
#if LANG_CXX11
inline void RequestVoteRequest::set_peer_id(::std::string&& value) {
  set_has_peer_id();
  peer_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:braft.RequestVoteRequest.peer_id)
}
#endif
inline void RequestVoteRequest::set_peer_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_peer_id();
  peer_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:braft.RequestVoteRequest.peer_id)
}
inline void RequestVoteRequest::set_peer_id(const char* value, size_t size) {
  set_has_peer_id();
  peer_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:braft.RequestVoteRequest.peer_id)
}
inline ::std::string* RequestVoteRequest::mutable_peer_id() {
  set_has_peer_id();
  // @@protoc_insertion_point(field_mutable:braft.RequestVoteRequest.peer_id)
  return peer_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RequestVoteRequest::release_peer_id() {
  // @@protoc_insertion_point(field_release:braft.RequestVoteRequest.peer_id)
  clear_has_peer_id();
  return peer_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RequestVoteRequest::set_allocated_peer_id(::std::string* peer_id) {
  if (peer_id != NULL) {
    set_has_peer_id();
  } else {
    clear_has_peer_id();
  }
  peer_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), peer_id);
  // @@protoc_insertion_point(field_set_allocated:braft.RequestVoteRequest.peer_id)
}

// required int64 term = 4;
inline bool RequestVoteRequest::has_term() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RequestVoteRequest::set_has_term() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RequestVoteRequest::clear_has_term() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RequestVoteRequest::clear_term() {
  term_ = GOOGLE_LONGLONG(0);
  clear_has_term();
}
inline ::google::protobuf::int64 RequestVoteRequest::term() const {
  // @@protoc_insertion_point(field_get:braft.RequestVoteRequest.term)
  return term_;
}
inline void RequestVoteRequest::set_term(::google::protobuf::int64 value) {
  set_has_term();
  term_ = value;
  // @@protoc_insertion_point(field_set:braft.RequestVoteRequest.term)
}

// required int64 last_log_term = 5;
inline bool RequestVoteRequest::has_last_log_term() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RequestVoteRequest::set_has_last_log_term() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RequestVoteRequest::clear_has_last_log_term() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RequestVoteRequest::clear_last_log_term() {
  last_log_term_ = GOOGLE_LONGLONG(0);
  clear_has_last_log_term();
}
inline ::google::protobuf::int64 RequestVoteRequest::last_log_term() const {
  // @@protoc_insertion_point(field_get:braft.RequestVoteRequest.last_log_term)
  return last_log_term_;
}
inline void RequestVoteRequest::set_last_log_term(::google::protobuf::int64 value) {
  set_has_last_log_term();
  last_log_term_ = value;
  // @@protoc_insertion_point(field_set:braft.RequestVoteRequest.last_log_term)
}

// required int64 last_log_index = 6;
inline bool RequestVoteRequest::has_last_log_index() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RequestVoteRequest::set_has_last_log_index() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RequestVoteRequest::clear_has_last_log_index() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RequestVoteRequest::clear_last_log_index() {
  last_log_index_ = GOOGLE_LONGLONG(0);
  clear_has_last_log_index();
}
inline ::google::protobuf::int64 RequestVoteRequest::last_log_index() const {
  // @@protoc_insertion_point(field_get:braft.RequestVoteRequest.last_log_index)
  return last_log_index_;
}
inline void RequestVoteRequest::set_last_log_index(::google::protobuf::int64 value) {
  set_has_last_log_index();
  last_log_index_ = value;
  // @@protoc_insertion_point(field_set:braft.RequestVoteRequest.last_log_index)
}

// optional .braft.TermLeader disrupted_leader = 7;
inline bool RequestVoteRequest::has_disrupted_leader() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RequestVoteRequest::set_has_disrupted_leader() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RequestVoteRequest::clear_has_disrupted_leader() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RequestVoteRequest::clear_disrupted_leader() {
  if (disrupted_leader_ != NULL) disrupted_leader_->Clear();
  clear_has_disrupted_leader();
}
inline const ::braft::TermLeader& RequestVoteRequest::disrupted_leader() const {
  const ::braft::TermLeader* p = disrupted_leader_;
  // @@protoc_insertion_point(field_get:braft.RequestVoteRequest.disrupted_leader)
  return p != NULL ? *p : *reinterpret_cast<const ::braft::TermLeader*>(
      &::braft::_TermLeader_default_instance_);
}
inline ::braft::TermLeader* RequestVoteRequest::release_disrupted_leader() {
  // @@protoc_insertion_point(field_release:braft.RequestVoteRequest.disrupted_leader)
  clear_has_disrupted_leader();
  ::braft::TermLeader* temp = disrupted_leader_;
  disrupted_leader_ = NULL;
  return temp;
}
inline ::braft::TermLeader* RequestVoteRequest::mutable_disrupted_leader() {
  set_has_disrupted_leader();
  if (disrupted_leader_ == NULL) {
    disrupted_leader_ = new ::braft::TermLeader;
  }
  // @@protoc_insertion_point(field_mutable:braft.RequestVoteRequest.disrupted_leader)
  return disrupted_leader_;
}
inline void RequestVoteRequest::set_allocated_disrupted_leader(::braft::TermLeader* disrupted_leader) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete disrupted_leader_;
  }
  if (disrupted_leader) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      disrupted_leader = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, disrupted_leader, submessage_arena);
    }
    set_has_disrupted_leader();
  } else {
    clear_has_disrupted_leader();
  }
  disrupted_leader_ = disrupted_leader;
  // @@protoc_insertion_point(field_set_allocated:braft.RequestVoteRequest.disrupted_leader)
}

// -------------------------------------------------------------------

// RequestVoteResponse

// required int64 term = 1;
inline bool RequestVoteResponse::has_term() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RequestVoteResponse::set_has_term() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RequestVoteResponse::clear_has_term() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RequestVoteResponse::clear_term() {
  term_ = GOOGLE_LONGLONG(0);
  clear_has_term();
}
inline ::google::protobuf::int64 RequestVoteResponse::term() const {
  // @@protoc_insertion_point(field_get:braft.RequestVoteResponse.term)
  return term_;
}
inline void RequestVoteResponse::set_term(::google::protobuf::int64 value) {
  set_has_term();
  term_ = value;
  // @@protoc_insertion_point(field_set:braft.RequestVoteResponse.term)
}

// required bool granted = 2;
inline bool RequestVoteResponse::has_granted() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RequestVoteResponse::set_has_granted() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RequestVoteResponse::clear_has_granted() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RequestVoteResponse::clear_granted() {
  granted_ = false;
  clear_has_granted();
}
inline bool RequestVoteResponse::granted() const {
  // @@protoc_insertion_point(field_get:braft.RequestVoteResponse.granted)
  return granted_;
}
inline void RequestVoteResponse::set_granted(bool value) {
  set_has_granted();
  granted_ = value;
  // @@protoc_insertion_point(field_set:braft.RequestVoteResponse.granted)
}

// optional bool disrupted = 3;
inline bool RequestVoteResponse::has_disrupted() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RequestVoteResponse::set_has_disrupted() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RequestVoteResponse::clear_has_disrupted() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RequestVoteResponse::clear_disrupted() {
  disrupted_ = false;
  clear_has_disrupted();
}
inline bool RequestVoteResponse::disrupted() const {
  // @@protoc_insertion_point(field_get:braft.RequestVoteResponse.disrupted)
  return disrupted_;
}
inline void RequestVoteResponse::set_disrupted(bool value) {
  set_has_disrupted();
  disrupted_ = value;
  // @@protoc_insertion_point(field_set:braft.RequestVoteResponse.disrupted)
}

// optional int64 previous_term = 4;
inline bool RequestVoteResponse::has_previous_term() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RequestVoteResponse::set_has_previous_term() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RequestVoteResponse::clear_has_previous_term() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RequestVoteResponse::clear_previous_term() {
  previous_term_ = GOOGLE_LONGLONG(0);
  clear_has_previous_term();
}
inline ::google::protobuf::int64 RequestVoteResponse::previous_term() const {
  // @@protoc_insertion_point(field_get:braft.RequestVoteResponse.previous_term)
  return previous_term_;
}
inline void RequestVoteResponse::set_previous_term(::google::protobuf::int64 value) {
  set_has_previous_term();
  previous_term_ = value;
  // @@protoc_insertion_point(field_set:braft.RequestVoteResponse.previous_term)
}

// optional bool rejected_by_lease = 5;
inline bool RequestVoteResponse::has_rejected_by_lease() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RequestVoteResponse::set_has_rejected_by_lease() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RequestVoteResponse::clear_has_rejected_by_lease() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RequestVoteResponse::clear_rejected_by_lease() {
  rejected_by_lease_ = false;
  clear_has_rejected_by_lease();
}
inline bool RequestVoteResponse::rejected_by_lease() const {
  // @@protoc_insertion_point(field_get:braft.RequestVoteResponse.rejected_by_lease)
  return rejected_by_lease_;
}
inline void RequestVoteResponse::set_rejected_by_lease(bool value) {
  set_has_rejected_by_lease();
  rejected_by_lease_ = value;
  // @@protoc_insertion_point(field_set:braft.RequestVoteResponse.rejected_by_lease)
}

// -------------------------------------------------------------------

// AppendEntriesRequest

// required string group_id = 1;
inline bool AppendEntriesRequest::has_group_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AppendEntriesRequest::set_has_group_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AppendEntriesRequest::clear_has_group_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AppendEntriesRequest::clear_group_id() {
  group_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_group_id();
}
inline const ::std::string& AppendEntriesRequest::group_id() const {
  // @@protoc_insertion_point(field_get:braft.AppendEntriesRequest.group_id)
  return group_id_.GetNoArena();
}
inline void AppendEntriesRequest::set_group_id(const ::std::string& value) {
  set_has_group_id();
  group_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:braft.AppendEntriesRequest.group_id)
}
#if LANG_CXX11
inline void AppendEntriesRequest::set_group_id(::std::string&& value) {
  set_has_group_id();
  group_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:braft.AppendEntriesRequest.group_id)
}
#endif
inline void AppendEntriesRequest::set_group_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_group_id();
  group_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:braft.AppendEntriesRequest.group_id)
}
inline void AppendEntriesRequest::set_group_id(const char* value, size_t size) {
  set_has_group_id();
  group_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:braft.AppendEntriesRequest.group_id)
}
inline ::std::string* AppendEntriesRequest::mutable_group_id() {
  set_has_group_id();
  // @@protoc_insertion_point(field_mutable:braft.AppendEntriesRequest.group_id)
  return group_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AppendEntriesRequest::release_group_id() {
  // @@protoc_insertion_point(field_release:braft.AppendEntriesRequest.group_id)
  clear_has_group_id();
  return group_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AppendEntriesRequest::set_allocated_group_id(::std::string* group_id) {
  if (group_id != NULL) {
    set_has_group_id();
  } else {
    clear_has_group_id();
  }
  group_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), group_id);
  // @@protoc_insertion_point(field_set_allocated:braft.AppendEntriesRequest.group_id)
}

// required string server_id = 2;
inline bool AppendEntriesRequest::has_server_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AppendEntriesRequest::set_has_server_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AppendEntriesRequest::clear_has_server_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AppendEntriesRequest::clear_server_id() {
  server_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_server_id();
}
inline const ::std::string& AppendEntriesRequest::server_id() const {
  // @@protoc_insertion_point(field_get:braft.AppendEntriesRequest.server_id)
  return server_id_.GetNoArena();
}
inline void AppendEntriesRequest::set_server_id(const ::std::string& value) {
  set_has_server_id();
  server_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:braft.AppendEntriesRequest.server_id)
}
#if LANG_CXX11
inline void AppendEntriesRequest::set_server_id(::std::string&& value) {
  set_has_server_id();
  server_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:braft.AppendEntriesRequest.server_id)
}
#endif
inline void AppendEntriesRequest::set_server_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_server_id();
  server_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:braft.AppendEntriesRequest.server_id)
}
inline void AppendEntriesRequest::set_server_id(const char* value, size_t size) {
  set_has_server_id();
  server_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:braft.AppendEntriesRequest.server_id)
}
inline ::std::string* AppendEntriesRequest::mutable_server_id() {
  set_has_server_id();
  // @@protoc_insertion_point(field_mutable:braft.AppendEntriesRequest.server_id)
  return server_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AppendEntriesRequest::release_server_id() {
  // @@protoc_insertion_point(field_release:braft.AppendEntriesRequest.server_id)
  clear_has_server_id();
  return server_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AppendEntriesRequest::set_allocated_server_id(::std::string* server_id) {
  if (server_id != NULL) {
    set_has_server_id();
  } else {
    clear_has_server_id();
  }
  server_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), server_id);
  // @@protoc_insertion_point(field_set_allocated:braft.AppendEntriesRequest.server_id)
}

// required string peer_id = 3;
inline bool AppendEntriesRequest::has_peer_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AppendEntriesRequest::set_has_peer_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AppendEntriesRequest::clear_has_peer_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AppendEntriesRequest::clear_peer_id() {
  peer_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_peer_id();
}
inline const ::std::string& AppendEntriesRequest::peer_id() const {
  // @@protoc_insertion_point(field_get:braft.AppendEntriesRequest.peer_id)
  return peer_id_.GetNoArena();
}
inline void AppendEntriesRequest::set_peer_id(const ::std::string& value) {
  set_has_peer_id();
  peer_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:braft.AppendEntriesRequest.peer_id)
}
#if LANG_CXX11
inline void AppendEntriesRequest::set_peer_id(::std::string&& value) {
  set_has_peer_id();
  peer_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:braft.AppendEntriesRequest.peer_id)
}
#endif
inline void AppendEntriesRequest::set_peer_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_peer_id();
  peer_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:braft.AppendEntriesRequest.peer_id)
}
inline void AppendEntriesRequest::set_peer_id(const char* value, size_t size) {
  set_has_peer_id();
  peer_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:braft.AppendEntriesRequest.peer_id)
}
inline ::std::string* AppendEntriesRequest::mutable_peer_id() {
  set_has_peer_id();
  // @@protoc_insertion_point(field_mutable:braft.AppendEntriesRequest.peer_id)
  return peer_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AppendEntriesRequest::release_peer_id() {
  // @@protoc_insertion_point(field_release:braft.AppendEntriesRequest.peer_id)
  clear_has_peer_id();
  return peer_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AppendEntriesRequest::set_allocated_peer_id(::std::string* peer_id) {
  if (peer_id != NULL) {
    set_has_peer_id();
  } else {
    clear_has_peer_id();
  }
  peer_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), peer_id);
  // @@protoc_insertion_point(field_set_allocated:braft.AppendEntriesRequest.peer_id)
}

// required int64 term = 4;
inline bool AppendEntriesRequest::has_term() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AppendEntriesRequest::set_has_term() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AppendEntriesRequest::clear_has_term() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AppendEntriesRequest::clear_term() {
  term_ = GOOGLE_LONGLONG(0);
  clear_has_term();
}
inline ::google::protobuf::int64 AppendEntriesRequest::term() const {
  // @@protoc_insertion_point(field_get:braft.AppendEntriesRequest.term)
  return term_;
}
inline void AppendEntriesRequest::set_term(::google::protobuf::int64 value) {
  set_has_term();
  term_ = value;
  // @@protoc_insertion_point(field_set:braft.AppendEntriesRequest.term)
}

// required int64 prev_log_term = 5;
inline bool AppendEntriesRequest::has_prev_log_term() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AppendEntriesRequest::set_has_prev_log_term() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AppendEntriesRequest::clear_has_prev_log_term() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AppendEntriesRequest::clear_prev_log_term() {
  prev_log_term_ = GOOGLE_LONGLONG(0);
  clear_has_prev_log_term();
}
inline ::google::protobuf::int64 AppendEntriesRequest::prev_log_term() const {
  // @@protoc_insertion_point(field_get:braft.AppendEntriesRequest.prev_log_term)
  return prev_log_term_;
}
inline void AppendEntriesRequest::set_prev_log_term(::google::protobuf::int64 value) {
  set_has_prev_log_term();
  prev_log_term_ = value;
  // @@protoc_insertion_point(field_set:braft.AppendEntriesRequest.prev_log_term)
}

// required int64 prev_log_index = 6;
inline bool AppendEntriesRequest::has_prev_log_index() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void AppendEntriesRequest::set_has_prev_log_index() {
  _has_bits_[0] |= 0x00000020u;
}
inline void AppendEntriesRequest::clear_has_prev_log_index() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void AppendEntriesRequest::clear_prev_log_index() {
  prev_log_index_ = GOOGLE_LONGLONG(0);
  clear_has_prev_log_index();
}
inline ::google::protobuf::int64 AppendEntriesRequest::prev_log_index() const {
  // @@protoc_insertion_point(field_get:braft.AppendEntriesRequest.prev_log_index)
  return prev_log_index_;
}
inline void AppendEntriesRequest::set_prev_log_index(::google::protobuf::int64 value) {
  set_has_prev_log_index();
  prev_log_index_ = value;
  // @@protoc_insertion_point(field_set:braft.AppendEntriesRequest.prev_log_index)
}

// repeated .braft.EntryMeta entries = 7;
inline int AppendEntriesRequest::entries_size() const {
  return entries_.size();
}
inline void AppendEntriesRequest::clear_entries() {
  entries_.Clear();
}
inline const ::braft::EntryMeta& AppendEntriesRequest::entries(int index) const {
  // @@protoc_insertion_point(field_get:braft.AppendEntriesRequest.entries)
  return entries_.Get(index);
}
inline ::braft::EntryMeta* AppendEntriesRequest::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:braft.AppendEntriesRequest.entries)
  return entries_.Mutable(index);
}
inline ::braft::EntryMeta* AppendEntriesRequest::add_entries() {
  // @@protoc_insertion_point(field_add:braft.AppendEntriesRequest.entries)
  return entries_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::braft::EntryMeta >*
AppendEntriesRequest::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:braft.AppendEntriesRequest.entries)
  return &entries_;
}
inline const ::google::protobuf::RepeatedPtrField< ::braft::EntryMeta >&
AppendEntriesRequest::entries() const {
  // @@protoc_insertion_point(field_list:braft.AppendEntriesRequest.entries)
  return entries_;
}

// required int64 committed_index = 8;
inline bool AppendEntriesRequest::has_committed_index() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void AppendEntriesRequest::set_has_committed_index() {
  _has_bits_[0] |= 0x00000040u;
}
inline void AppendEntriesRequest::clear_has_committed_index() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void AppendEntriesRequest::clear_committed_index() {
  committed_index_ = GOOGLE_LONGLONG(0);
  clear_has_committed_index();
}
inline ::google::protobuf::int64 AppendEntriesRequest::committed_index() const {
  // @@protoc_insertion_point(field_get:braft.AppendEntriesRequest.committed_index)
  return committed_index_;
}
inline void AppendEntriesRequest::set_committed_index(::google::protobuf::int64 value) {
  set_has_committed_index();
  committed_index_ = value;
  // @@protoc_insertion_point(field_set:braft.AppendEntriesRequest.committed_index)
}

// -------------------------------------------------------------------

// AppendEntriesResponse

// required int64 term = 1;
inline bool AppendEntriesResponse::has_term() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AppendEntriesResponse::set_has_term() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AppendEntriesResponse::clear_has_term() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AppendEntriesResponse::clear_term() {
  term_ = GOOGLE_LONGLONG(0);
  clear_has_term();
}
inline ::google::protobuf::int64 AppendEntriesResponse::term() const {
  // @@protoc_insertion_point(field_get:braft.AppendEntriesResponse.term)
  return term_;
}
inline void AppendEntriesResponse::set_term(::google::protobuf::int64 value) {
  set_has_term();
  term_ = value;
  // @@protoc_insertion_point(field_set:braft.AppendEntriesResponse.term)
}

// required bool success = 2;
inline bool AppendEntriesResponse::has_success() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AppendEntriesResponse::set_has_success() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AppendEntriesResponse::clear_has_success() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AppendEntriesResponse::clear_success() {
  success_ = false;
  clear_has_success();
}
inline bool AppendEntriesResponse::success() const {
  // @@protoc_insertion_point(field_get:braft.AppendEntriesResponse.success)
  return success_;
}
inline void AppendEntriesResponse::set_success(bool value) {
  set_has_success();
  success_ = value;
  // @@protoc_insertion_point(field_set:braft.AppendEntriesResponse.success)
}

// optional int64 last_log_index = 3;
inline bool AppendEntriesResponse::has_last_log_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AppendEntriesResponse::set_has_last_log_index() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AppendEntriesResponse::clear_has_last_log_index() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AppendEntriesResponse::clear_last_log_index() {
  last_log_index_ = GOOGLE_LONGLONG(0);
  clear_has_last_log_index();
}
inline ::google::protobuf::int64 AppendEntriesResponse::last_log_index() const {
  // @@protoc_insertion_point(field_get:braft.AppendEntriesResponse.last_log_index)
  return last_log_index_;
}
inline void AppendEntriesResponse::set_last_log_index(::google::protobuf::int64 value) {
  set_has_last_log_index();
  last_log_index_ = value;
  // @@protoc_insertion_point(field_set:braft.AppendEntriesResponse.last_log_index)
}

// optional bool readonly = 4;
inline bool AppendEntriesResponse::has_readonly() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AppendEntriesResponse::set_has_readonly() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AppendEntriesResponse::clear_has_readonly() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AppendEntriesResponse::clear_readonly() {
  readonly_ = false;
  clear_has_readonly();
}
inline bool AppendEntriesResponse::readonly() const {
  // @@protoc_insertion_point(field_get:braft.AppendEntriesResponse.readonly)
  return readonly_;
}
inline void AppendEntriesResponse::set_readonly(bool value) {
  set_has_readonly();
  readonly_ = value;
  // @@protoc_insertion_point(field_set:braft.AppendEntriesResponse.readonly)
}

// -------------------------------------------------------------------

// SnapshotMeta

// required int64 last_included_index = 1;
inline bool SnapshotMeta::has_last_included_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SnapshotMeta::set_has_last_included_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SnapshotMeta::clear_has_last_included_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SnapshotMeta::clear_last_included_index() {
  last_included_index_ = GOOGLE_LONGLONG(0);
  clear_has_last_included_index();
}
inline ::google::protobuf::int64 SnapshotMeta::last_included_index() const {
  // @@protoc_insertion_point(field_get:braft.SnapshotMeta.last_included_index)
  return last_included_index_;
}
inline void SnapshotMeta::set_last_included_index(::google::protobuf::int64 value) {
  set_has_last_included_index();
  last_included_index_ = value;
  // @@protoc_insertion_point(field_set:braft.SnapshotMeta.last_included_index)
}

// required int64 last_included_term = 2;
inline bool SnapshotMeta::has_last_included_term() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SnapshotMeta::set_has_last_included_term() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SnapshotMeta::clear_has_last_included_term() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SnapshotMeta::clear_last_included_term() {
  last_included_term_ = GOOGLE_LONGLONG(0);
  clear_has_last_included_term();
}
inline ::google::protobuf::int64 SnapshotMeta::last_included_term() const {
  // @@protoc_insertion_point(field_get:braft.SnapshotMeta.last_included_term)
  return last_included_term_;
}
inline void SnapshotMeta::set_last_included_term(::google::protobuf::int64 value) {
  set_has_last_included_term();
  last_included_term_ = value;
  // @@protoc_insertion_point(field_set:braft.SnapshotMeta.last_included_term)
}

// repeated string peers = 3;
inline int SnapshotMeta::peers_size() const {
  return peers_.size();
}
inline void SnapshotMeta::clear_peers() {
  peers_.Clear();
}
inline const ::std::string& SnapshotMeta::peers(int index) const {
  // @@protoc_insertion_point(field_get:braft.SnapshotMeta.peers)
  return peers_.Get(index);
}
inline ::std::string* SnapshotMeta::mutable_peers(int index) {
  // @@protoc_insertion_point(field_mutable:braft.SnapshotMeta.peers)
  return peers_.Mutable(index);
}
inline void SnapshotMeta::set_peers(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:braft.SnapshotMeta.peers)
  peers_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void SnapshotMeta::set_peers(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:braft.SnapshotMeta.peers)
  peers_.Mutable(index)->assign(std::move(value));
}
#endif
inline void SnapshotMeta::set_peers(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  peers_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:braft.SnapshotMeta.peers)
}
inline void SnapshotMeta::set_peers(int index, const char* value, size_t size) {
  peers_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:braft.SnapshotMeta.peers)
}
inline ::std::string* SnapshotMeta::add_peers() {
  // @@protoc_insertion_point(field_add_mutable:braft.SnapshotMeta.peers)
  return peers_.Add();
}
inline void SnapshotMeta::add_peers(const ::std::string& value) {
  peers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:braft.SnapshotMeta.peers)
}
#if LANG_CXX11
inline void SnapshotMeta::add_peers(::std::string&& value) {
  peers_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:braft.SnapshotMeta.peers)
}
#endif
inline void SnapshotMeta::add_peers(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  peers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:braft.SnapshotMeta.peers)
}
inline void SnapshotMeta::add_peers(const char* value, size_t size) {
  peers_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:braft.SnapshotMeta.peers)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
SnapshotMeta::peers() const {
  // @@protoc_insertion_point(field_list:braft.SnapshotMeta.peers)
  return peers_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
SnapshotMeta::mutable_peers() {
  // @@protoc_insertion_point(field_mutable_list:braft.SnapshotMeta.peers)
  return &peers_;
}

// repeated string old_peers = 4;
inline int SnapshotMeta::old_peers_size() const {
  return old_peers_.size();
}
inline void SnapshotMeta::clear_old_peers() {
  old_peers_.Clear();
}
inline const ::std::string& SnapshotMeta::old_peers(int index) const {
  // @@protoc_insertion_point(field_get:braft.SnapshotMeta.old_peers)
  return old_peers_.Get(index);
}
inline ::std::string* SnapshotMeta::mutable_old_peers(int index) {
  // @@protoc_insertion_point(field_mutable:braft.SnapshotMeta.old_peers)
  return old_peers_.Mutable(index);
}
inline void SnapshotMeta::set_old_peers(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:braft.SnapshotMeta.old_peers)
  old_peers_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void SnapshotMeta::set_old_peers(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:braft.SnapshotMeta.old_peers)
  old_peers_.Mutable(index)->assign(std::move(value));
}
#endif
inline void SnapshotMeta::set_old_peers(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  old_peers_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:braft.SnapshotMeta.old_peers)
}
inline void SnapshotMeta::set_old_peers(int index, const char* value, size_t size) {
  old_peers_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:braft.SnapshotMeta.old_peers)
}
inline ::std::string* SnapshotMeta::add_old_peers() {
  // @@protoc_insertion_point(field_add_mutable:braft.SnapshotMeta.old_peers)
  return old_peers_.Add();
}
inline void SnapshotMeta::add_old_peers(const ::std::string& value) {
  old_peers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:braft.SnapshotMeta.old_peers)
}
#if LANG_CXX11
inline void SnapshotMeta::add_old_peers(::std::string&& value) {
  old_peers_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:braft.SnapshotMeta.old_peers)
}
#endif
inline void SnapshotMeta::add_old_peers(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  old_peers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:braft.SnapshotMeta.old_peers)
}
inline void SnapshotMeta::add_old_peers(const char* value, size_t size) {
  old_peers_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:braft.SnapshotMeta.old_peers)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
SnapshotMeta::old_peers() const {
  // @@protoc_insertion_point(field_list:braft.SnapshotMeta.old_peers)
  return old_peers_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
SnapshotMeta::mutable_old_peers() {
  // @@protoc_insertion_point(field_mutable_list:braft.SnapshotMeta.old_peers)
  return &old_peers_;
}

// -------------------------------------------------------------------

// InstallSnapshotRequest

// required string group_id = 1;
inline bool InstallSnapshotRequest::has_group_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void InstallSnapshotRequest::set_has_group_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void InstallSnapshotRequest::clear_has_group_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void InstallSnapshotRequest::clear_group_id() {
  group_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_group_id();
}
inline const ::std::string& InstallSnapshotRequest::group_id() const {
  // @@protoc_insertion_point(field_get:braft.InstallSnapshotRequest.group_id)
  return group_id_.GetNoArena();
}
inline void InstallSnapshotRequest::set_group_id(const ::std::string& value) {
  set_has_group_id();
  group_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:braft.InstallSnapshotRequest.group_id)
}
#if LANG_CXX11
inline void InstallSnapshotRequest::set_group_id(::std::string&& value) {
  set_has_group_id();
  group_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:braft.InstallSnapshotRequest.group_id)
}
#endif
inline void InstallSnapshotRequest::set_group_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_group_id();
  group_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:braft.InstallSnapshotRequest.group_id)
}
inline void InstallSnapshotRequest::set_group_id(const char* value, size_t size) {
  set_has_group_id();
  group_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:braft.InstallSnapshotRequest.group_id)
}
inline ::std::string* InstallSnapshotRequest::mutable_group_id() {
  set_has_group_id();
  // @@protoc_insertion_point(field_mutable:braft.InstallSnapshotRequest.group_id)
  return group_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InstallSnapshotRequest::release_group_id() {
  // @@protoc_insertion_point(field_release:braft.InstallSnapshotRequest.group_id)
  clear_has_group_id();
  return group_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InstallSnapshotRequest::set_allocated_group_id(::std::string* group_id) {
  if (group_id != NULL) {
    set_has_group_id();
  } else {
    clear_has_group_id();
  }
  group_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), group_id);
  // @@protoc_insertion_point(field_set_allocated:braft.InstallSnapshotRequest.group_id)
}

// required string server_id = 2;
inline bool InstallSnapshotRequest::has_server_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void InstallSnapshotRequest::set_has_server_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void InstallSnapshotRequest::clear_has_server_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void InstallSnapshotRequest::clear_server_id() {
  server_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_server_id();
}
inline const ::std::string& InstallSnapshotRequest::server_id() const {
  // @@protoc_insertion_point(field_get:braft.InstallSnapshotRequest.server_id)
  return server_id_.GetNoArena();
}
inline void InstallSnapshotRequest::set_server_id(const ::std::string& value) {
  set_has_server_id();
  server_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:braft.InstallSnapshotRequest.server_id)
}
#if LANG_CXX11
inline void InstallSnapshotRequest::set_server_id(::std::string&& value) {
  set_has_server_id();
  server_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:braft.InstallSnapshotRequest.server_id)
}
#endif
inline void InstallSnapshotRequest::set_server_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_server_id();
  server_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:braft.InstallSnapshotRequest.server_id)
}
inline void InstallSnapshotRequest::set_server_id(const char* value, size_t size) {
  set_has_server_id();
  server_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:braft.InstallSnapshotRequest.server_id)
}
inline ::std::string* InstallSnapshotRequest::mutable_server_id() {
  set_has_server_id();
  // @@protoc_insertion_point(field_mutable:braft.InstallSnapshotRequest.server_id)
  return server_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InstallSnapshotRequest::release_server_id() {
  // @@protoc_insertion_point(field_release:braft.InstallSnapshotRequest.server_id)
  clear_has_server_id();
  return server_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InstallSnapshotRequest::set_allocated_server_id(::std::string* server_id) {
  if (server_id != NULL) {
    set_has_server_id();
  } else {
    clear_has_server_id();
  }
  server_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), server_id);
  // @@protoc_insertion_point(field_set_allocated:braft.InstallSnapshotRequest.server_id)
}

// required string peer_id = 3;
inline bool InstallSnapshotRequest::has_peer_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void InstallSnapshotRequest::set_has_peer_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void InstallSnapshotRequest::clear_has_peer_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void InstallSnapshotRequest::clear_peer_id() {
  peer_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_peer_id();
}
inline const ::std::string& InstallSnapshotRequest::peer_id() const {
  // @@protoc_insertion_point(field_get:braft.InstallSnapshotRequest.peer_id)
  return peer_id_.GetNoArena();
}
inline void InstallSnapshotRequest::set_peer_id(const ::std::string& value) {
  set_has_peer_id();
  peer_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:braft.InstallSnapshotRequest.peer_id)
}
#if LANG_CXX11
inline void InstallSnapshotRequest::set_peer_id(::std::string&& value) {
  set_has_peer_id();
  peer_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:braft.InstallSnapshotRequest.peer_id)
}
#endif
inline void InstallSnapshotRequest::set_peer_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_peer_id();
  peer_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:braft.InstallSnapshotRequest.peer_id)
}
inline void InstallSnapshotRequest::set_peer_id(const char* value, size_t size) {
  set_has_peer_id();
  peer_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:braft.InstallSnapshotRequest.peer_id)
}
inline ::std::string* InstallSnapshotRequest::mutable_peer_id() {
  set_has_peer_id();
  // @@protoc_insertion_point(field_mutable:braft.InstallSnapshotRequest.peer_id)
  return peer_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InstallSnapshotRequest::release_peer_id() {
  // @@protoc_insertion_point(field_release:braft.InstallSnapshotRequest.peer_id)
  clear_has_peer_id();
  return peer_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InstallSnapshotRequest::set_allocated_peer_id(::std::string* peer_id) {
  if (peer_id != NULL) {
    set_has_peer_id();
  } else {
    clear_has_peer_id();
  }
  peer_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), peer_id);
  // @@protoc_insertion_point(field_set_allocated:braft.InstallSnapshotRequest.peer_id)
}

// required int64 term = 4;
inline bool InstallSnapshotRequest::has_term() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void InstallSnapshotRequest::set_has_term() {
  _has_bits_[0] |= 0x00000020u;
}
inline void InstallSnapshotRequest::clear_has_term() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void InstallSnapshotRequest::clear_term() {
  term_ = GOOGLE_LONGLONG(0);
  clear_has_term();
}
inline ::google::protobuf::int64 InstallSnapshotRequest::term() const {
  // @@protoc_insertion_point(field_get:braft.InstallSnapshotRequest.term)
  return term_;
}
inline void InstallSnapshotRequest::set_term(::google::protobuf::int64 value) {
  set_has_term();
  term_ = value;
  // @@protoc_insertion_point(field_set:braft.InstallSnapshotRequest.term)
}

// required .braft.SnapshotMeta meta = 5;
inline bool InstallSnapshotRequest::has_meta() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void InstallSnapshotRequest::set_has_meta() {
  _has_bits_[0] |= 0x00000010u;
}
inline void InstallSnapshotRequest::clear_has_meta() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void InstallSnapshotRequest::clear_meta() {
  if (meta_ != NULL) meta_->Clear();
  clear_has_meta();
}
inline const ::braft::SnapshotMeta& InstallSnapshotRequest::meta() const {
  const ::braft::SnapshotMeta* p = meta_;
  // @@protoc_insertion_point(field_get:braft.InstallSnapshotRequest.meta)
  return p != NULL ? *p : *reinterpret_cast<const ::braft::SnapshotMeta*>(
      &::braft::_SnapshotMeta_default_instance_);
}
inline ::braft::SnapshotMeta* InstallSnapshotRequest::release_meta() {
  // @@protoc_insertion_point(field_release:braft.InstallSnapshotRequest.meta)
  clear_has_meta();
  ::braft::SnapshotMeta* temp = meta_;
  meta_ = NULL;
  return temp;
}
inline ::braft::SnapshotMeta* InstallSnapshotRequest::mutable_meta() {
  set_has_meta();
  if (meta_ == NULL) {
    meta_ = new ::braft::SnapshotMeta;
  }
  // @@protoc_insertion_point(field_mutable:braft.InstallSnapshotRequest.meta)
  return meta_;
}
inline void InstallSnapshotRequest::set_allocated_meta(::braft::SnapshotMeta* meta) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete meta_;
  }
  if (meta) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      meta = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, meta, submessage_arena);
    }
    set_has_meta();
  } else {
    clear_has_meta();
  }
  meta_ = meta;
  // @@protoc_insertion_point(field_set_allocated:braft.InstallSnapshotRequest.meta)
}

// required string uri = 6;
inline bool InstallSnapshotRequest::has_uri() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void InstallSnapshotRequest::set_has_uri() {
  _has_bits_[0] |= 0x00000008u;
}
inline void InstallSnapshotRequest::clear_has_uri() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void InstallSnapshotRequest::clear_uri() {
  uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_uri();
}
inline const ::std::string& InstallSnapshotRequest::uri() const {
  // @@protoc_insertion_point(field_get:braft.InstallSnapshotRequest.uri)
  return uri_.GetNoArena();
}
inline void InstallSnapshotRequest::set_uri(const ::std::string& value) {
  set_has_uri();
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:braft.InstallSnapshotRequest.uri)
}
#if LANG_CXX11
inline void InstallSnapshotRequest::set_uri(::std::string&& value) {
  set_has_uri();
  uri_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:braft.InstallSnapshotRequest.uri)
}
#endif
inline void InstallSnapshotRequest::set_uri(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_uri();
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:braft.InstallSnapshotRequest.uri)
}
inline void InstallSnapshotRequest::set_uri(const char* value, size_t size) {
  set_has_uri();
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:braft.InstallSnapshotRequest.uri)
}
inline ::std::string* InstallSnapshotRequest::mutable_uri() {
  set_has_uri();
  // @@protoc_insertion_point(field_mutable:braft.InstallSnapshotRequest.uri)
  return uri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InstallSnapshotRequest::release_uri() {
  // @@protoc_insertion_point(field_release:braft.InstallSnapshotRequest.uri)
  clear_has_uri();
  return uri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InstallSnapshotRequest::set_allocated_uri(::std::string* uri) {
  if (uri != NULL) {
    set_has_uri();
  } else {
    clear_has_uri();
  }
  uri_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uri);
  // @@protoc_insertion_point(field_set_allocated:braft.InstallSnapshotRequest.uri)
}

// -------------------------------------------------------------------

// InstallSnapshotResponse

// required int64 term = 1;
inline bool InstallSnapshotResponse::has_term() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void InstallSnapshotResponse::set_has_term() {
  _has_bits_[0] |= 0x00000001u;
}
inline void InstallSnapshotResponse::clear_has_term() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void InstallSnapshotResponse::clear_term() {
  term_ = GOOGLE_LONGLONG(0);
  clear_has_term();
}
inline ::google::protobuf::int64 InstallSnapshotResponse::term() const {
  // @@protoc_insertion_point(field_get:braft.InstallSnapshotResponse.term)
  return term_;
}
inline void InstallSnapshotResponse::set_term(::google::protobuf::int64 value) {
  set_has_term();
  term_ = value;
  // @@protoc_insertion_point(field_set:braft.InstallSnapshotResponse.term)
}

// required bool success = 2;
inline bool InstallSnapshotResponse::has_success() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void InstallSnapshotResponse::set_has_success() {
  _has_bits_[0] |= 0x00000002u;
}
inline void InstallSnapshotResponse::clear_has_success() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void InstallSnapshotResponse::clear_success() {
  success_ = false;
  clear_has_success();
}
inline bool InstallSnapshotResponse::success() const {
  // @@protoc_insertion_point(field_get:braft.InstallSnapshotResponse.success)
  return success_;
}
inline void InstallSnapshotResponse::set_success(bool value) {
  set_has_success();
  success_ = value;
  // @@protoc_insertion_point(field_set:braft.InstallSnapshotResponse.success)
}

// -------------------------------------------------------------------

// TimeoutNowRequest

// required string group_id = 1;
inline bool TimeoutNowRequest::has_group_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TimeoutNowRequest::set_has_group_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TimeoutNowRequest::clear_has_group_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TimeoutNowRequest::clear_group_id() {
  group_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_group_id();
}
inline const ::std::string& TimeoutNowRequest::group_id() const {
  // @@protoc_insertion_point(field_get:braft.TimeoutNowRequest.group_id)
  return group_id_.GetNoArena();
}
inline void TimeoutNowRequest::set_group_id(const ::std::string& value) {
  set_has_group_id();
  group_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:braft.TimeoutNowRequest.group_id)
}
#if LANG_CXX11
inline void TimeoutNowRequest::set_group_id(::std::string&& value) {
  set_has_group_id();
  group_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:braft.TimeoutNowRequest.group_id)
}
#endif
inline void TimeoutNowRequest::set_group_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_group_id();
  group_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:braft.TimeoutNowRequest.group_id)
}
inline void TimeoutNowRequest::set_group_id(const char* value, size_t size) {
  set_has_group_id();
  group_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:braft.TimeoutNowRequest.group_id)
}
inline ::std::string* TimeoutNowRequest::mutable_group_id() {
  set_has_group_id();
  // @@protoc_insertion_point(field_mutable:braft.TimeoutNowRequest.group_id)
  return group_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TimeoutNowRequest::release_group_id() {
  // @@protoc_insertion_point(field_release:braft.TimeoutNowRequest.group_id)
  clear_has_group_id();
  return group_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TimeoutNowRequest::set_allocated_group_id(::std::string* group_id) {
  if (group_id != NULL) {
    set_has_group_id();
  } else {
    clear_has_group_id();
  }
  group_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), group_id);
  // @@protoc_insertion_point(field_set_allocated:braft.TimeoutNowRequest.group_id)
}

// required string server_id = 2;
inline bool TimeoutNowRequest::has_server_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TimeoutNowRequest::set_has_server_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TimeoutNowRequest::clear_has_server_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TimeoutNowRequest::clear_server_id() {
  server_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_server_id();
}
inline const ::std::string& TimeoutNowRequest::server_id() const {
  // @@protoc_insertion_point(field_get:braft.TimeoutNowRequest.server_id)
  return server_id_.GetNoArena();
}
inline void TimeoutNowRequest::set_server_id(const ::std::string& value) {
  set_has_server_id();
  server_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:braft.TimeoutNowRequest.server_id)
}
#if LANG_CXX11
inline void TimeoutNowRequest::set_server_id(::std::string&& value) {
  set_has_server_id();
  server_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:braft.TimeoutNowRequest.server_id)
}
#endif
inline void TimeoutNowRequest::set_server_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_server_id();
  server_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:braft.TimeoutNowRequest.server_id)
}
inline void TimeoutNowRequest::set_server_id(const char* value, size_t size) {
  set_has_server_id();
  server_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:braft.TimeoutNowRequest.server_id)
}
inline ::std::string* TimeoutNowRequest::mutable_server_id() {
  set_has_server_id();
  // @@protoc_insertion_point(field_mutable:braft.TimeoutNowRequest.server_id)
  return server_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TimeoutNowRequest::release_server_id() {
  // @@protoc_insertion_point(field_release:braft.TimeoutNowRequest.server_id)
  clear_has_server_id();
  return server_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TimeoutNowRequest::set_allocated_server_id(::std::string* server_id) {
  if (server_id != NULL) {
    set_has_server_id();
  } else {
    clear_has_server_id();
  }
  server_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), server_id);
  // @@protoc_insertion_point(field_set_allocated:braft.TimeoutNowRequest.server_id)
}

// required string peer_id = 3;
inline bool TimeoutNowRequest::has_peer_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TimeoutNowRequest::set_has_peer_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TimeoutNowRequest::clear_has_peer_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TimeoutNowRequest::clear_peer_id() {
  peer_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_peer_id();
}
inline const ::std::string& TimeoutNowRequest::peer_id() const {
  // @@protoc_insertion_point(field_get:braft.TimeoutNowRequest.peer_id)
  return peer_id_.GetNoArena();
}
inline void TimeoutNowRequest::set_peer_id(const ::std::string& value) {
  set_has_peer_id();
  peer_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:braft.TimeoutNowRequest.peer_id)
}
#if LANG_CXX11
inline void TimeoutNowRequest::set_peer_id(::std::string&& value) {
  set_has_peer_id();
  peer_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:braft.TimeoutNowRequest.peer_id)
}
#endif
inline void TimeoutNowRequest::set_peer_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_peer_id();
  peer_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:braft.TimeoutNowRequest.peer_id)
}
inline void TimeoutNowRequest::set_peer_id(const char* value, size_t size) {
  set_has_peer_id();
  peer_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:braft.TimeoutNowRequest.peer_id)
}
inline ::std::string* TimeoutNowRequest::mutable_peer_id() {
  set_has_peer_id();
  // @@protoc_insertion_point(field_mutable:braft.TimeoutNowRequest.peer_id)
  return peer_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TimeoutNowRequest::release_peer_id() {
  // @@protoc_insertion_point(field_release:braft.TimeoutNowRequest.peer_id)
  clear_has_peer_id();
  return peer_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TimeoutNowRequest::set_allocated_peer_id(::std::string* peer_id) {
  if (peer_id != NULL) {
    set_has_peer_id();
  } else {
    clear_has_peer_id();
  }
  peer_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), peer_id);
  // @@protoc_insertion_point(field_set_allocated:braft.TimeoutNowRequest.peer_id)
}

// required int64 term = 4;
inline bool TimeoutNowRequest::has_term() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TimeoutNowRequest::set_has_term() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TimeoutNowRequest::clear_has_term() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TimeoutNowRequest::clear_term() {
  term_ = GOOGLE_LONGLONG(0);
  clear_has_term();
}
inline ::google::protobuf::int64 TimeoutNowRequest::term() const {
  // @@protoc_insertion_point(field_get:braft.TimeoutNowRequest.term)
  return term_;
}
inline void TimeoutNowRequest::set_term(::google::protobuf::int64 value) {
  set_has_term();
  term_ = value;
  // @@protoc_insertion_point(field_set:braft.TimeoutNowRequest.term)
}

// optional bool old_leader_stepped_down = 5;
inline bool TimeoutNowRequest::has_old_leader_stepped_down() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TimeoutNowRequest::set_has_old_leader_stepped_down() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TimeoutNowRequest::clear_has_old_leader_stepped_down() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TimeoutNowRequest::clear_old_leader_stepped_down() {
  old_leader_stepped_down_ = false;
  clear_has_old_leader_stepped_down();
}
inline bool TimeoutNowRequest::old_leader_stepped_down() const {
  // @@protoc_insertion_point(field_get:braft.TimeoutNowRequest.old_leader_stepped_down)
  return old_leader_stepped_down_;
}
inline void TimeoutNowRequest::set_old_leader_stepped_down(bool value) {
  set_has_old_leader_stepped_down();
  old_leader_stepped_down_ = value;
  // @@protoc_insertion_point(field_set:braft.TimeoutNowRequest.old_leader_stepped_down)
}

// -------------------------------------------------------------------

// TimeoutNowResponse

// required int64 term = 1;
inline bool TimeoutNowResponse::has_term() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TimeoutNowResponse::set_has_term() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TimeoutNowResponse::clear_has_term() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TimeoutNowResponse::clear_term() {
  term_ = GOOGLE_LONGLONG(0);
  clear_has_term();
}
inline ::google::protobuf::int64 TimeoutNowResponse::term() const {
  // @@protoc_insertion_point(field_get:braft.TimeoutNowResponse.term)
  return term_;
}
inline void TimeoutNowResponse::set_term(::google::protobuf::int64 value) {
  set_has_term();
  term_ = value;
  // @@protoc_insertion_point(field_set:braft.TimeoutNowResponse.term)
}

// required bool success = 2;
inline bool TimeoutNowResponse::has_success() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TimeoutNowResponse::set_has_success() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TimeoutNowResponse::clear_has_success() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TimeoutNowResponse::clear_success() {
  success_ = false;
  clear_has_success();
}
inline bool TimeoutNowResponse::success() const {
  // @@protoc_insertion_point(field_get:braft.TimeoutNowResponse.success)
  return success_;
}
inline void TimeoutNowResponse::set_success(bool value) {
  set_has_success();
  success_ = value;
  // @@protoc_insertion_point(field_set:braft.TimeoutNowResponse.success)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace braft

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_braft_2fraft_2eproto__INCLUDED
