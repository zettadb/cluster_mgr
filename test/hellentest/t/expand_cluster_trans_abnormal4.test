--connection default
--let $node_mgr_1 = query_get_value(select hostaddr from server_nodes where machine_type = "computer",hostaddr,1)
--let $node_mgr_2 = query_get_value(select hostaddr from server_nodes where machine_type = "computer",hostaddr,2)
--let $node_mgr_3 = query_get_value(select hostaddr from server_nodes where machine_type = "computer",hostaddr,3)
--let $storage_iplists="$node_mgr_1","$node_mgr_2","$node_mgr_3"

--http_connect(cluster_mgr_http1, cluster_mgr,50000)

--http
request_type: POST
header:Content-Type:application/json
body:{
        "version":"1.0",
        "job_id":"",
        "job_type":"create_cluster",
        "user_name":"kunlun_test",
        "timestamp":"202205131532",
        "paras":{
              "nick_name":"rbrcluster001",
              "ha_mode":"rbr",
              "shards":"2",
              "nodes":"3",
              "comps":"1",
              "max_storage_size":"20",
              "max_connections":"6",
              "cpu_cores":"8",
              "innodb_size":"1",
              "dbcfg":"0",
              "fullsync_level": "1",
              "storage_iplists": [
                   ${storage_iplists}
                          ],
              "computer_iplists": [
                   ${storage_iplists}
                           ]
  }
}
EOF

--let $job_id = `http_reap(job_id)`
--sleep 20
--source kunlun-test/include/wait_http_request_finish.inc
--sleep 20

--kl_cluster_id(1)
#check shard master and slave
--source kunlun-test/include/check_shard_state.inc

--connection default
--let $cluster_id = `select id from db_clusters  limit 0,1;`
--connection default
--let $dst_shard_id = `select distinct shard_id from shard_nodes where db_cluster_id =  $cluster_id  limit 1,1;`
--let $src_shard_id = `select distinct shard_id from shard_nodes where db_cluster_id =  $cluster_id  limit 0,1;`
#--echo $src_shard_id

--pg_connect(testrbr1,computer.1, abc, abc)
drop table if exists student;
send_eval create table student(id int primary key, info text, wt int) with (shard = $src_shard_id);
sleep 20;
reap;
insert into student(id,info,wt) values(1, 'record1', 1);
insert into student(id,info,wt) values(2, 'record2', 2);
insert into student(id,info,wt) values(3, 'record3', 3);
drop table if exists transfer_account;
send_eval create table transfer_account(id int primary key,tradedate varchar(255), money int default 1000)partition by range(id) with (shard = $src_shard_id);
reap;
send_eval create table transfer_account_01 partition of  transfer_account for values from (MINVALUE) to(250) with (shard = $src_shard_id);
reap;
send_eval create table transfer_account_02 partition of  transfer_account for values from (250) to(500) with (shard = $src_shard_id);
reap;
send_eval create table transfer_account_03 partition of  transfer_account for values from (500) to(750) with (shard = $dst_shard_id);
reap;
send_eval create table transfer_account_04 partition of  transfer_account for values from (750) to(1001) with (shard = $dst_shard_id);
reap;
insert into transfer_account select generate_series(1,200),('2022-01-05');
insert into transfer_account select generate_series(201,300),('2022-04-06');
insert into transfer_account select generate_series(301,400),('2022-05-09');
insert into transfer_account select generate_series(401,450),('2022-07-02');
insert into transfer_account select generate_series(451,500),('2022-08-01');
insert into transfer_account select generate_series(501,700),('2022-09-25');
insert into transfer_account select generate_series(701,900),('2022-11-02');
insert into transfer_account select generate_series(901,1000),('2022-12-30');
--sleep 20


--exec_in_background python2 /home/hellen/kunlun_test_framework_nostatus/mysql-test/kunlun-test/t/loop_process_transfer.py --meta_host 192.168.0.140:59301 --thread_num 1 --clusterid $cluster_id --timeout 50 --total_money 1000000

--sleep 70

--connection cluster_mgr_http1
--http
request_type: POST
header:Content-Type:application/json
body:{
    "version":"1.0",
    "job_id":"",
    "job_type":"cluster_debug",
    "timestamp":"1435749309",
    "user_name":"kunlun_test",
    "paras":{
        "keyword":"Mock_Expand_Load_Table_Failed",
        "op_type":"add"
    }
}
EOF
--sleep 20


--http
request_type: POST
header:Content-Type:application/json
body:{
        "version":"1.0",
        "job_id":"",
        "job_type":"expand_cluster",
        "timestamp" : "1435749309",
        "user_name":"kunlun_test",
        "paras":{ 
               "cluster_id":"${cluster_id}",
               "dst_shard_id":"${dst_shard_id}",
               "src_shard_id":"${src_shard_id}",
               "table_list":["postgres.public.transfer_account_01","postgres.public.transfer_account_02"]
                 }
}
EOF

--let $job_id = `http_reap(job_id)`
--sleep 20
#--source kunlun-test/include/wait_http_request_finish.inc

